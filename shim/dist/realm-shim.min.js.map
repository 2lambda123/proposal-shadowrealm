{"version":3,"file":"realm-shim.min.js","sources":["../src/utilities.js","../src/realmFacade.js","../src/stdlib.js","../src/repair/accessors.js","../src/repair/functions.js","../src/unsafeRec.js","../src/optimizer.js","../src/scopeHandler.js","../src/sourceParser.js","../src/evaluators.js","../src/realm.js","../src/commons.js"],"sourcesContent":["// we'd like to abandon, but we can't, so just scream and break a lot of\n// stuff. However, since we aren't really aborting the process, be careful to\n// not throw an Error object which could be captured by child-Realm code and\n// used to access the (too-powerful) primal-realm Error object.\n\nexport function throwTantrum(s, err = undefined) {\n  const msg = `please report internal shim error: ${s}`;\n\n  // we want to log these 'should never happen' things.\n  // eslint-disable-next-line no-console\n  console.error(msg);\n  if (err) {\n    // eslint-disable-next-line no-console\n    console.error(`${err}`);\n    // eslint-disable-next-line no-console\n    console.error(`${err.stack}`);\n  }\n\n  // eslint-disable-next-line no-debugger\n  debugger;\n  throw msg;\n}\n\nexport function assert(condition, message) {\n  if (!condition) {\n    throwTantrum(message);\n  }\n}\n\n// Remove code modifications.\nexport function cleanupSource(src) {\n  /* START_TESTS_ONLY */\n\n  // Restore eval which is modified by esm module.\n  src = src.replace(/\\(0,[^)]+\\)/g, '(0, eval)');\n\n  // Remove code coverage which is injected by nyc module.\n  src = src.replace(/cov_[^+]+\\+\\+[;,]/g, '');\n\n  /* END_TESTS_ONLY */\n  return src;\n}\n","import { cleanupSource } from './utilities';\n\n// buildChildRealm is immediately turned into a string, and this function is\n// never referenced again, because it closes over the wrong intrinsics\n\nexport function buildChildRealm(unsafeRec, BaseRealm) {\n  const { initRootRealm, initCompartment, getRealmGlobal, realmEvaluate } = BaseRealm;\n\n  // This Object and Reflect are brand new, from a new unsafeRec, so no user\n  // code has been run or had a chance to manipulate them. We extract these\n  // properties for brevity, not for security. Don't ever run this function\n  // *after* user code has had a chance to pollute its environment, or it\n  // could be used to gain access to BaseRealm and primal-realm Error\n  // objects.\n  const { create, defineProperty } = Object;\n\n  const errorConstructors = new Map([\n    ['EvalError', EvalError],\n    ['RangeError', RangeError],\n    ['ReferenceError', ReferenceError],\n    ['SyntaxError', SyntaxError],\n    ['TypeError', TypeError],\n    ['URIError', URIError]\n  ]);\n\n  // Like Realm.apply except that it catches anything thrown and rethrows it\n  // as an Error from this realm\n  function callAndWrapError(target, ...args) {\n    try {\n      return target(...args);\n    } catch (err) {\n      if (Object(err) !== err) {\n        // err is a primitive value, which is safe to rethrow\n        throw err;\n      }\n      let eName, eMessage, eStack;\n      try {\n        // The child environment might seek to use 'err' to reach the\n        // parent's intrinsics and corrupt them. `${err.name}` will cause\n        // string coercion of 'err.name'. If err.name is an object (probably\n        // a String of the parent Realm), the coercion uses\n        // err.name.toString(), which is under the control of the parent. If\n        // err.name were a primitive (e.g. a number), it would use\n        // Number.toString(err.name), using the child's version of Number\n        // (which the child could modify to capture its argument for later\n        // use), however primitives don't have properties like .prototype so\n        // they aren't useful for an attack.\n        eName = `${err.name}`;\n        eMessage = `${err.message}`;\n        eStack = `${err.stack}`;\n        // eName/eMessage/eStack are now child-realm primitive strings, and\n        // safe to expose\n      } catch (ignored) {\n        // if err.name.toString() throws, keep the (parent realm) Error away\n        // from the child\n        throw new Error('unknown error');\n      }\n      const ErrorConstructor = errorConstructors.get(eName) || Error;\n      try {\n        throw new ErrorConstructor(eMessage);\n      } catch (err2) {\n        err2.stack = eStack; // replace with the captured inner stack\n        throw err2;\n      }\n    }\n  }\n\n  class Realm {\n    constructor() {\n      // The Realm constructor is not intended to be used with the new operator\n      // or to be subclassed. It may be used as the value of an extends clause\n      // of a class definition but a super call to the Realm constructor will\n      // cause an exception.\n\n      // When Realm is called as a function, an exception is also raised because\n      // a class constructor cannot be invoked without 'new'.\n      throw new TypeError('Realm is not a constructor');\n    }\n\n    static makeRootRealm(options) {\n      // This is the exposed interface.\n      options = Object(options); // todo: sanitize\n\n      // Bypass the constructor.\n      const r = create(Realm.prototype);\n      callAndWrapError(initRootRealm, unsafeRec, r, options);\n      return r;\n    }\n\n    static makeCompartment() {\n      // Bypass the constructor.\n      const r = create(Realm.prototype);\n      callAndWrapError(initCompartment, unsafeRec, r);\n      return r;\n    }\n\n    // we omit the constructor because it is empty. All the personalization\n    // takes place in one of the two static methods,\n    // makeRootRealm/makeCompartment\n\n    get global() {\n      // this is safe against being called with strange 'this' because\n      // baseGetGlobal immediately does a trademark check (it fails unless\n      // this 'this' is present in a weakmap that is only populated with\n      // legitimate Realm instances)\n      return callAndWrapError(getRealmGlobal, this);\n    }\n\n    evaluate(x, endowments) {\n      // safe against strange 'this', as above\n      return callAndWrapError(realmEvaluate, this, x, endowments);\n    }\n  }\n\n  defineProperty(Realm, 'toString', {\n    value: () => 'function Realm() { [shim code] }',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  defineProperty(Realm.prototype, 'toString', {\n    value: () => '[object Realm]',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  return Realm;\n}\n\n// The parentheses means we don't bind the 'buildChildRealm' name inside the\n// child's namespace. this would accept an anonymous function declaration.\n// function expression (not a declaration) so it has a completion value.\nconst buildChildRealmString = cleanupSource(`'use strict'; (${buildChildRealm})`);\n\nexport function createRealmFacade(unsafeRec, BaseRealm) {\n  const { unsafeEval } = unsafeRec;\n\n  // The BaseRealm is the Realm class created by\n  // the shim. It's only valid for the context where\n  // it was parsed.\n\n  // The Realm facade is a lightweight class built in the\n  // context a different context, that provide a fully\n  // functional Realm class using the intrisics\n  // of that context.\n\n  // This process is simplified because all methods\n  // and properties on a realm instance already return\n  // values using the intrinsics of the realm's context.\n\n  // Invoke the BaseRealm constructor with Realm as the prototype.\n  return unsafeEval(buildChildRealmString)(unsafeRec, BaseRealm);\n}\n","import { getOwnPropertyDescriptor } from './commons';\nimport { assert } from './utilities';\n\n// All the following stdlib items have the same name on both our intrinsics\n// object and on the global object. Unlike Infinity/NaN/undefined, these\n// should all be writable and configurable.\nconst sharedGlobalPropertyNames = [\n  // *** 18.2 Function Properties of the Global Object\n\n  // 'eval', // comes from safeEval instead\n  'isFinite',\n  'isNaN',\n  'parseFloat',\n  'parseInt',\n\n  'decodeURI',\n  'decodeURIComponent',\n  'encodeURI',\n  'encodeURIComponent',\n\n  // *** 18.3 Constructor Properties of the Global Object\n\n  'Array',\n  'ArrayBuffer',\n  'Boolean',\n  'DataView',\n  'Date',\n  'Error',\n  'EvalError',\n  'Float32Array',\n  'Float64Array',\n  // 'Function', // comes from safeFunction instead\n  'Int8Array',\n  'Int16Array',\n  'Int32Array',\n  'Map',\n  'Number',\n  'Object',\n  'Promise',\n  'Proxy',\n  'RangeError',\n  'ReferenceError',\n  'RegExp',\n  'Set',\n  // 'SharedArrayBuffer' // removed on Jan 5, 2018\n  'String',\n  'Symbol',\n  'SyntaxError',\n  'TypeError',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Uint16Array',\n  'Uint32Array',\n  'URIError',\n  'WeakMap',\n  'WeakSet',\n\n  // *** 18.4 Other Properties of the Global Object\n\n  // 'Atomics', // removed on Jan 5, 2018\n  'JSON',\n  'Math',\n  'Reflect',\n\n  // *** Annex B\n\n  'escape',\n  'unescape',\n\n  // *** ECMA-402\n\n  'Intl'\n\n  // *** ESNext\n\n  // 'Realm' // Comes from createRealmGlobalObject()\n];\n\nexport function getSharedGlobalDescs(unsafeGlobal) {\n  const descriptors = {\n    // *** 18.1 Value Properties of the Global Object\n    Infinity: { value: Infinity },\n    NaN: { value: NaN },\n    undefined: { value: undefined }\n  };\n\n  for (const name of sharedGlobalPropertyNames) {\n    const desc = getOwnPropertyDescriptor(unsafeGlobal, name);\n    if (desc) {\n      // Abort if an accessor is found on the unsafe global object instead of a\n      // data property. We should never get into this non standard situation.\n      assert('value' in desc, `unexpected accessor on global property: ${name}`);\n\n      descriptors[name] = {\n        value: desc.value,\n        writable: true,\n        configurable: true\n      };\n    }\n  }\n\n  return descriptors;\n}\n","// Adapted from SES/Caja - Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * Replace the legacy accessors of Object to comply with strict mode\n * and ES2016 semantics, we do this by redefining them while in 'use strict'.\n *\n * todo: list the issues resolved\n *\n * This function can be used in two ways: (1) invoked directly to fix the primal\n * realm's Object.prototype, and (2) converted to a string to be executed\n * inside each new RootRealm to fix their Object.prototypes. Evaluation requires\n * the function to have no dependencies, so don't import anything from the outside.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairAccessors() {\n  const {\n    defineProperty,\n    defineProperties,\n    getOwnPropertyDescriptor,\n    getPrototypeOf,\n    prototype: objectPrototype\n  } = Object;\n\n  // On some platforms, the implementation of these functions act as if they are\n  // in sloppy mode: if they're invoked badly, they will expose the global object,\n  // so we need to repair these for security. Thus it is our responsibility to fix\n  // this, and we need to include repairAccessors. E.g. Chrome in 2016.\n\n  try {\n    // Verify that the method is not callable.\n    // eslint-disable-next-line no-restricted-properties, no-underscore-dangle\n    (0, objectPrototype.__lookupGetter__)('x');\n  } catch (ignore) {\n    // Throws, no need to patch.\n    return;\n  }\n\n  function toObject(obj) {\n    if (obj === undefined || obj === null) {\n      throw new TypeError(`can't convert undefined or null to object`);\n    }\n    return Object(obj);\n  }\n\n  function asPropertyName(obj) {\n    if (typeof obj === 'symbol') {\n      return obj;\n    }\n    return `${obj}`;\n  }\n\n  function aFunction(obj, accessor) {\n    if (typeof obj !== 'function') {\n      throw TypeError(`invalid ${accessor} usage`);\n    }\n    return obj;\n  }\n\n  defineProperties(objectPrototype, {\n    __defineGetter__: {\n    value: function __defineGetter__(prop, func) {\n      const O = toObject(this);\n      defineProperty(O, prop, {\n        get: aFunction(func, 'getter'),\n        enumerable: true,\n        configurable: true\n      });\n    }\n    },\n    __defineSetter__: {\n    value: function __defineSetter__(prop, func) {\n      const O = toObject(this);\n      defineProperty(O, prop, {\n        set: aFunction(func, 'setter'),\n        enumerable: true,\n        configurable: true\n      });\n    }\n    },\n    __lookupGetter__: {\n    value: function __lookupGetter__(prop) {\n      let O = toObject(this);\n      prop = asPropertyName(prop);\n      let desc;\n      while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n        O = getPrototypeOf(O);\n      }\n      return desc && desc.get;\n    }\n    },\n    __lookupSetter__: {\n    value: function __lookupSetter__(prop) {\n      let O = toObject(this);\n      prop = asPropertyName(prop);\n      let desc;\n      while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n        O = getPrototypeOf(O);\n      }\n      return desc && desc.set;\n    }\n    }\n  });\n}\n","// Adapted from SES/Caja\n// Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * This block replaces the original Function constructor, and the original\n * %GeneratorFunction% %AsyncFunction% and %AsyncGeneratorFunction%, with\n * safe replacements that throw if invoked.\n *\n * These are all reachable via syntax, so it isn't sufficient to just\n * replace global properties with safe versions. Our main goal is to prevent\n * access to the Function constructor through these starting points.\n\n * After this block is done, the originals must no longer be reachable, unless\n * a copy has been made, and funtions can only be created by syntax (using eval)\n * or by invoking a previously saved reference to the originals.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairFunctions() {\n  const { defineProperty, getPrototypeOf, setPrototypeOf } = Object;\n\n  /**\n   * The process to repair constructors:\n   * 1. Create an instance of the function by evaluating syntax\n   * 2. Obtain the prototype from the instance\n   * 3. Create a substitute tamed constructor\n   * 4. Replace the original constructor with the tamed constructor\n   * 5. Replace tamed constructor prototype property with the original one\n   * 6. Replace its [[Prototype]] slot with the tamed constructor of Function\n   */\n  function repairFunction(name, declaration) {\n    let FunctionInstance;\n    try {\n      // eslint-disable-next-line no-new-func\n      FunctionInstance = (0, eval)(declaration);\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        // Prevent failure on platforms where async and/or generators are not supported.\n        return;\n      }\n      // Re-throw\n      throw e;\n    }\n    const FunctionPrototype = getPrototypeOf(FunctionInstance);\n\n    // Prevents the evaluation of source when calling constructor on the prototype of functions.\n    // eslint-disable-next-line no-new-func\n    const TamedFunction = Function('throw new TypeError(\"Not available\");');\n    defineProperty(TamedFunction, 'name', { value: name });\n\n    // (new Error()).constructors does not inherit from Function, because Error\n    // was defined before ES6 classes. So we don't need to repair it too.\n\n    // (Error()).constructor inherit from Function, which gets a tamed constructor here.\n\n    // todo: in an ES6 class that does not inherit from anything, what does its\n    // constructor inherit from? We worry that it inherits from Function, in\n    // which case instances could give access to unsafeFunction. markm says\n    // we're fine: the constructor inherits from Object.prototype\n\n    // This line replaces the original constructor in the prototype chain\n    // with the tamed one. No copy of the original is peserved.\n    defineProperty(FunctionPrototype, 'constructor', { value: TamedFunction });\n\n    // This line sets the tamed constructor's prototype data property to\n    // the original one.\n    defineProperty(TamedFunction, 'prototype', { value: FunctionPrototype });\n\n    if (TamedFunction !== Function.prototype.constructor) {\n      // Ensures that all functions meet \"instanceof Function\" in a realm.\n      setPrototypeOf(TamedFunction, Function.prototype.constructor);\n    }\n  }\n\n  // Here, the order of operation is important: Function needs to be repaired\n  // first since the other repaired constructors need to inherit from the tamed\n  // Function function constructor.\n\n  // note: this really wants to be part of the standard, because new\n  // constructors may be added in the future, reachable from syntax, and this\n  // list must be updated to match.\n\n  // \"plain arrow functions\" inherit from Function.prototype\n\n  repairFunction('Function', '(function(){})');\n  repairFunction('GeneratorFunction', '(function*(){})');\n  repairFunction('AsyncFunction', '(async function(){})');\n  repairFunction('AsyncGeneratorFunction', '(async function*(){})');\n}\n","// this module must never be importable outside the Realm shim itself\nimport { getSharedGlobalDescs } from './stdlib';\nimport { repairAccessors } from './repair/accessors';\nimport { repairFunctions } from './repair/functions';\nimport { cleanupSource } from './utilities';\nimport { freeze } from './commons';\n\n// A \"context\" is a fresh unsafe Realm as given to us by existing platforms.\n// We need this to implement the shim. However, when Realms land for real,\n// this feature will be provided by the underlying engine instead.\n\n// Platform detection.\nconst isNode = typeof exports === 'object' && typeof module !== 'undefined';\nconst isBrowser = typeof document === 'object';\nif ((!isNode && !isBrowser) || (isNode && isBrowser)) {\n  throw new Error('unexpected platform, unable to create Realm');\n}\nconst vm = isNode ? require('vm') : undefined;\n\n// note: in a node module, the top-level 'this' is not the global object\n// (it's *something* but we aren't sure what), however an indirect eval of\n// 'this' will be the correct global object.\n\nconst unsafeGlobalSrc = \"'use strict'; this\";\nconst unsafeGlobalEvalSrc = `(0, eval)(\"'use strict'; this\")`;\n\n// This method is only exported for testing purposes.\nexport function createNewUnsafeGlobalForNode() {\n  // Use unsafeGlobalEvalSrc to ensure we get the right 'this'.\n  const unsafeGlobal = vm.runInNewContext(unsafeGlobalEvalSrc);\n\n  return unsafeGlobal;\n}\n\n// This method is only exported for testing purposes.\nexport function createNewUnsafeGlobalForBrowser() {\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n\n  document.body.appendChild(iframe);\n  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);\n\n  // We keep the iframe attached to the DOM because removing it\n  // causes its global object to lose intrinsics, its eval()\n  // function to evaluate code, etc.\n\n  // TODO: can we remove and garbage-collect the iframes?\n\n  return unsafeGlobal;\n}\n\nconst getNewUnsafeGlobal = isNode ? createNewUnsafeGlobalForNode : createNewUnsafeGlobalForBrowser;\n\n// The unsafeRec is shim-specific. It acts as the mechanism to obtain a fresh\n// set of intrinsics together with their associated eval and Function\n// evaluators. These must be used as a matched set, since the evaluators are\n// tied to a set of intrinsics, aka the \"undeniables\". If it were possible to\n// mix-and-match them from different contexts, that would enable some\n// attacks.\nfunction createUnsafeRec(unsafeGlobal, allShims = []) {\n  const sharedGlobalDescs = getSharedGlobalDescs(unsafeGlobal);\n\n  return freeze({\n    unsafeGlobal,\n    sharedGlobalDescs,\n    unsafeEval: unsafeGlobal.eval,\n    unsafeFunction: unsafeGlobal.Function,\n    allShims\n  });\n}\n\nconst repairAccessorsShim = cleanupSource(`\"use strict\"; (${repairAccessors})();`);\nconst repairFunctionsShim = cleanupSource(`\"use strict\"; (${repairFunctions})();`);\n\n// Create a new unsafeRec from a brand new context, with new intrinsics and a\n// new global object\nexport function createNewUnsafeRec(allShims) {\n  const unsafeGlobal = getNewUnsafeGlobal();\n  unsafeGlobal.eval(repairAccessorsShim);\n  unsafeGlobal.eval(repairFunctionsShim);\n  return createUnsafeRec(unsafeGlobal, allShims);\n}\n\n// Create a new unsafeRec from the current context, where the Realm shim is\n// being parsed and executed, aka the \"Primal Realm\"\nexport function createCurrentUnsafeRec() {\n  const unsafeGlobal = (0, eval)(unsafeGlobalSrc);\n  repairAccessors();\n  repairFunctions();\n  return createUnsafeRec(unsafeGlobal);\n}\n","import {\n  arrayFilter,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  objectHasOwnProperty,\n  regexpTest\n} from './commons';\n\n// todo: think about how this interacts with endowments, check for conflicts\n// between the names being optimized and the ones added by endowments\n\n/**\n * Simplified validation of indentifier names: may only contain alphanumeric\n * characters (or \"$\" or \"_\"), and may not start with a digit. This is safe\n * and does not reduces the compatibility of the shim. The motivation for\n * this limitation was to decrease the complexity of the implementation,\n * and to maintain a resonable level of performance.\n * Note: \\w is equivalent [a-zA-Z_0-9]\n * See 11.6.1 Identifier Names\n */\nconst identifierPattern = /^[a-zA-Z_$][\\w$]*$/;\n\n/**\n * In JavaScript you cannot use these reserved words as variables.\n * See 11.6.1 Identifier Names\n */\nconst keywords = new Set([\n  // 11.6.2.1 Keywords\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'export',\n  'extends',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'import',\n  'in',\n  'instanceof',\n  'new',\n  'return',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield',\n\n  // Also reserved when parsing strict mode code\n  'let',\n  'static',\n\n  // 11.6.2.2 Future Reserved Words\n  'enum',\n\n  // Also reserved when parsing strict mode code\n  'implements',\n  'package',\n  'protected',\n  'interface',\n  'private',\n  'public',\n\n  // Reserved but not mentioned in specs\n  'await',\n\n  'null',\n  'true',\n  'false',\n\n  'this',\n  'arguments'\n]);\n\n/**\n * getOptimizableGlobals()\n * What variable names might it bring into scope? These include all\n * property names which can be variable names, including the names\n * of inherited properties. It excludes symbols and names which are\n * keywords. We drop symbols safely. Currently, this shim refuses\n * service if any of the names are keywords or keyword-like. This is\n * safe and only prevent performance optimization.\n */\nexport function getOptimizableGlobals(safeGlobal) {\n  const descs = getOwnPropertyDescriptors(safeGlobal);\n\n  // getOwnPropertyNames does ignore Symbols so we don't need this extra check:\n  // typeof name === 'string' &&\n  const constants = arrayFilter(getOwnPropertyNames(descs), name => {\n    // Ensure we have a valid identifier. We use regexpTest rather than\n    // /../.test() to guard against the case where RegExp has been poisoned.\n    if (name === 'eval' || keywords.has(name) || !regexpTest(identifierPattern, name)) {\n      return false;\n    }\n\n    const desc = descs[name];\n    return (\n      //\n      // The getters will not have .writable, don't let the falsyness of\n      // 'undefined' trick us: test with === false, not ! . However descriptors\n      // inherit from the (potentially poisoned) global object, so we might see\n      // extra properties which weren't really there. Accessor properties have\n      // 'get/set/enumerable/configurable', while data properties have\n      // 'value/writable/enumerable/configurable'.\n      desc.configurable === false &&\n      desc.writable === false &&\n      //\n      // Checks for data properties because they're the only ones we can\n      // optimize (accessors are most likely non-constant). Descriptors can't\n      // can't have accessors and value properties at the same time, therefore\n      // this check is sufficient. Using explicit own property deal with the\n      // case where Object.prototype has been poisoned.\n      objectHasOwnProperty(desc, 'value')\n    );\n  });\n\n  return constants;\n}\n","import { freeze, getPrototypeOf, objectHasOwnProperty } from './commons';\nimport { throwTantrum } from './utilities';\n\n/**\n * alwaysThrowHandler is a proxy handler which throws on any trap called.\n * It's made from a proxy with a get trap that throws. Its target is\n * an immutable (frozen) object and is safe to share.\n */\nconst alwaysThrowHandler = new Proxy(freeze({}), {\n  get(target, prop) {\n    throwTantrum(`unexpected scope handler trap called: ${prop}`);\n  }\n});\n\n/**\n * ScopeHandler manages a Proxy which serves as the global scope for the\n * safeEvaluator operation (the Proxy is the argument of a 'with' binding).\n * As described in createSafeEvaluator(), it has several functions:\n * - allow the very first (and only the very first) use of 'eval' to map to\n *   the real (unsafe) eval function, so it acts as a 'direct eval' and can\n *    access its lexical scope (which maps to the 'with' binding, which the\n *   ScopeHandler also controls).\n * - ensure that all subsequent uses of 'eval' map to the safeEvaluator,\n *   which lives as the 'eval' property of the safeGlobal.\n * - route all other property lookups at the safeGlobal.\n * - hide the unsafeGlobal which lives on the scope chain above the 'with'.\n * - ensure the Proxy invariants despite some global properties being frozen.\n */\nexport function createScopeHandler(unsafeRec) {\n  const { unsafeGlobal, unsafeEval } = unsafeRec;\n\n  // This flag allow us to determine if the eval() call is an done by the\n  // realm's code or if it is user-land invocation, so we can react differently.\n  let useUnsafeEvaluator = false;\n\n  return {\n    // The scope handler throws if any trap other than get/set/has are run\n    // (e.g. getOwnPropertyDescriptors, apply, getPrototypeOf).\n    // eslint-disable-next-line no-proto\n    __proto__: alwaysThrowHandler,\n\n    allowUnsafeEvaluatorOnce() {\n      useUnsafeEvaluator = true;\n    },\n\n    unsafeEvaluatorAllowed() {\n      return useUnsafeEvaluator;\n    },\n\n    get(target, prop) {\n      // Special treatment for eval. The very first lookup of 'eval' gets the\n      // unsafe (real direct) eval, so it will get the lexical scope that uses\n      // the 'with' context.\n      if (prop === 'eval') {\n        // test that it is true rather than merely truthy\n        if (useUnsafeEvaluator === true) {\n          // revoke before use\n          useUnsafeEvaluator = false;\n          return unsafeEval;\n        }\n        return target.eval;\n      }\n\n      // todo: shim integrity, capture Symbol.unscopables\n      if (prop === Symbol.unscopables) {\n        // Safe to return a primal realm Object here because the only code that\n        // can do a get() on a non-string is the internals of with() itself,\n        // and the only thing it does is to look for properties on it. User\n        // code cannot do a lookup on non-strings.\n        return undefined;\n      }\n\n      // Properties of the global.\n      if (prop in target) {\n        return target[prop];\n      }\n\n      // Prevent the lookup for other properties.\n      return undefined;\n    },\n\n    // eslint-disable-next-line class-methods-use-this\n    set(target, prop, value) {\n      // todo: allow modifications when target.hasOwnProperty(prop) and it\n      // is writable, assuming we've already rejected overlap (see\n      // createSafeEvaluatorFactory.factory). This TypeError gets replaced with\n      // target[prop] = value\n      if (objectHasOwnProperty(target, prop)) {\n        // todo: shim integrity: TypeError, String\n        throw new TypeError(`do not modify endowments like ${String(prop)}`);\n      }\n\n      // todo (optimization): keep a reference to the shadow avoids calling\n      // getPrototypeOf on the target every time the set trap is invoked,\n      // since safeGlobal === getPrototypeOf(target).\n      getPrototypeOf(target)[prop] = value;\n\n      // Return true after successful set.\n      return true;\n    },\n\n    // we need has() to return false for some names to prevent the lookup  from\n    // climbing the scope chain and eventually reaching the unsafeGlobal\n    // object, which is bad.\n\n    // note: unscopables! every string in Object[Symbol.unscopables]\n\n    // todo: we'd like to just have has() return true for everything, and then\n    // use get() to raise a ReferenceError for anything not on the safe global.\n    // But we want to be compatible with ReferenceError in the normal case and\n    // the lack of ReferenceError in the 'typeof' case. Must either reliably\n    // distinguish these two cases (the trap behavior might be different), or\n    // we rely on a mandatory source-to-source transform to change 'typeof abc'\n    // to XXX. We already need a mandatory parse to prevent the 'import',\n    // since it's a special form instead of merely being a global variable/\n\n    // note: if we make has() return true always, then we must implement a\n    // set() trap to avoid subverting the protection of strict mode (it would\n    // accept assignments to undefined globals, when it ought to throw\n    // ReferenceError for such assignments)\n\n    has(target, prop) {\n      // proxies stringify 'prop', so no TOCTTOU danger here\n\n      // unsafeGlobal: hide all properties of unsafeGlobal at the expense of 'typeof'\n      // being wrong for those properties. For example, in the browser, evaluating\n      // 'document = 3', will add a property to  safeGlobal instead of throwing a\n      // ReferenceError.\n      if (prop === 'eval' || prop in target || prop in unsafeGlobal) {\n        return true;\n      }\n\n      return false;\n    }\n  };\n}\n","// this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\n// U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\n// whitespace by the parser, but not matched by /\\s/, then this would admit\n// an attack like: import\\u2028('power.js') . We're trying to distinguish\n// something like that from something like importnotreally('power.js') which\n// is perfectly safe.\n\nconst importParser = /^(.*)\\bimport\\s*(\\(|\\/\\/|\\/\\*)/m;\n\nexport function rejectImportExpressions(s) {\n  const matches = importParser.exec(s);\n  if (matches) {\n    // todo: if we have a full parser available, use it here. If there is no\n    // 'import' token in the string, we're safe.\n    // if (!parse(s).contains('import')) return;\n    const linenum = matches[1].split('\\n').length; // more or less\n    throw new SyntaxError(`possible import expression rejected around line ${linenum}`);\n  }\n}\n","// Portions adapted from V8 - Copyright 2016 the V8 project authors.\n// https://github.com/v8/v8/blob/master/src/builtins/builtins-function.cc\n\nimport {\n  apply,\n  arrayJoin,\n  arrayPop,\n  create,\n  defineProperty,\n  getOwnPropertyDescriptors,\n  getPrototypeOf,\n  setPrototypeOf,\n  stringIncludes\n} from './commons';\nimport { getOptimizableGlobals } from './optimizer';\nimport { createScopeHandler } from './scopeHandler';\nimport { rejectImportExpressions } from './sourceParser';\nimport { assert, throwTantrum } from './utilities';\n\nfunction buildOptimizer(constants) {\n  // No need to build an oprimizer when there are no constants.\n  if (constants.length === 0) return '';\n  // Use 'this' to avoid going through the scope proxy, which is unecessary\n  // since the optimizer only needs references to the safe global.\n  return `const {${arrayJoin(constants, ',')}} = this;`;\n}\n\nfunction createScopedEvaluatorFactory(unsafeRec, constants) {\n  const { unsafeFunction } = unsafeRec;\n\n  const optimizer = buildOptimizer(constants);\n\n  // Create a function in sloppy mode, so that we can use 'with'. It returns\n  // a function in strict mode that evaluates the provided code using direct\n  // eval, and thus in strict mode in the same scope. We must be very careful\n  // to not create new names in this scope\n\n  // 1: we use 'with' (around a Proxy) to catch all free variable names. The\n  // first 'arguments[0]' holds the Proxy which safely wraps the safeGlobal\n  // 2: 'optimizer' catches common variable names for speed\n  // 3: The inner strict function is effectively passed two parameters:\n  //    a) its arguments[0] is the source to be directly evaluated.\n  //    b) its 'this' is the this binding seen by the code being directly evaluated.\n\n  // everything in the 'optimizer' string is looked up in the proxy\n  // (including an 'arguments[0]', which points at the Proxy). 'function' is\n  // a keyword, not a variable, so it is not looked up. then 'eval' is looked\n  // up in the proxy, that's the first time it is looked up after\n  // useUnsafeEvaluator is turned on, so the proxy returns the real the\n  // unsafeEval, which satisfies the IsDirectEvalTrap predicate, so it uses\n  // the direct eval and gets the lexical scope. The second 'arguments[0]' is\n  // looked up in the context of the inner function. The *contents* of\n  // arguments[0], because we're using direct eval, are looked up in the\n  // Proxy, by which point the useUnsafeEvaluator switch has been flipped\n  // back to 'false', so any instances of 'eval' in that string will get the\n  // safe evaluator.\n\n  return unsafeFunction(`\n    with (arguments[0]) {\n      ${optimizer}\n      return function() {\n        'use strict';\n        return eval(arguments[0]);\n      };\n    }\n  `);\n}\n\nexport function createSafeEvaluatorFactory(unsafeRec, safeGlobal) {\n  const { unsafeFunction } = unsafeRec;\n\n  const scopeHandler = createScopeHandler(unsafeRec);\n  const optimizableGlobals = getOptimizableGlobals(safeGlobal);\n  const scopedEvaluatorFactory = createScopedEvaluatorFactory(unsafeRec, optimizableGlobals);\n\n  function factory(endowments = {}) {\n    // todo (shim limitation): scan endowments, throw error if endowment\n    // overlaps with the const optimization (which would otherwise\n    // incorrectly shadow endowments), or if endowments includes 'eval'. Also\n    // prohibit accessor properties (to be able to consistently explain\n    // things in terms of shimming the global lexical scope).\n    // writeable-vs-nonwritable == let-vs-const, but there's no\n    // global-lexical-scope equivalent of an accessor, outside what we can\n    // explain/spec\n    const scopeTarget = create(safeGlobal, getOwnPropertyDescriptors(endowments));\n    const scopeProxy = new Proxy(scopeTarget, scopeHandler);\n    const scopedEvaluator = apply(scopedEvaluatorFactory, safeGlobal, [scopeProxy]);\n\n    // We use the the concise method syntax to create an eval without a\n    // [[Construct]] behavior (such that the invocation \"new eval()\" throws\n    // TypeError: eval is not a constructor\"), but which still accepts a\n    // 'this' binding.\n    const safeEval = {\n      eval(src) {\n        src = `${src}`;\n        rejectImportExpressions(src);\n        scopeHandler.allowUnsafeEvaluatorOnce();\n        let err;\n        try {\n          // Ensure that \"this\" resolves to the safe global.\n          return apply(scopedEvaluator, safeGlobal, [src]);\n        } catch (e) {\n          // stash the child-code error in hopes of debugging the internal failure\n          err = e;\n          throw e;\n        } finally {\n          // belt and suspenders: the proxy switches this off immediately after\n          // the first access, but if that's not the case we abort.\n          if (scopeHandler.unsafeEvaluatorAllowed()) {\n            throwTantrum('handler did not revoke useUnsafeEvaluator', err);\n          }\n        }\n      }\n    }.eval;\n\n    // safeEval's prototype is currently the primal realm's\n    // Function.prototype, which we must not let escape. To make 'eval\n    // instanceof Function' be true inside the realm, we need to point it at\n    // the RootRealm's value.\n\n    // Ensure that eval from any compartment in a root realm is an instance\n    // of Function in any compartment of the same root realm.\n    setPrototypeOf(safeEval, unsafeFunction.prototype);\n\n    assert(getPrototypeOf(safeEval).constructor !== Function, 'hide Function');\n    assert(getPrototypeOf(safeEval).constructor !== unsafeFunction, 'hide unsafeFunction');\n\n    // note: be careful to not leak our primal Function.prototype by setting\n    // this to a plain arrow function. Now that we have safeEval, use it.\n    defineProperty(safeEval, 'toString', {\n      value: safeEval(\"() => 'function eval() { [shim code] }'\"),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    return safeEval;\n  }\n\n  return factory;\n}\n\nexport function createSafeEvaluator(safeEvaluatorFactory) {\n  return safeEvaluatorFactory();\n}\n\nexport function createSafeEvaluatorWhichTakesEndowments(safeEvaluatorFactory) {\n  return (x, endowments) => safeEvaluatorFactory(endowments)(x);\n}\n\n/**\n * A safe version of the native Function which relies on\n * the safety of evalEvaluator for confinement.\n */\nexport function createFunctionEvaluator(unsafeRec, safeEval) {\n  const { unsafeFunction, unsafeGlobal } = unsafeRec;\n\n  const safeFunction = function Function(...params) {\n    const functionBody = `${arrayPop(params) || ''}`;\n    let functionParams = `${arrayJoin(params, ',')}`;\n\n    // Is this a real functionBody, or is someone attempting an injection\n    // attack? This will throw a SyntaxError if the string is not actually a\n    // function body. We coerce the body into a real string above to prevent\n    // someone from passing an object with a toString() that returns a safe\n    // string the first time, but an evil string the second time.\n    // eslint-disable-next-line no-new, new-cap\n    new unsafeFunction(functionBody);\n\n    if (stringIncludes(functionParams, ')')) {\n      // If the formal parameters string include ) - an illegal\n      // character - it may make the combined function expression\n      // compile. We avoid this problem by checking for this early on.\n\n      // note: v8 throws just like this does, but chrome accepts e.g. 'a = new Date()'\n      throw new unsafeGlobal.SyntaxError(\n        'shim limitation: Function arg string contains parenthesis'\n      );\n      // todo: shim integrity threat if they change SyntaxError\n    }\n\n    // todo: check to make sure this .length is safe. markm says safe.\n    if (functionParams.length > 0) {\n      // If the formal parameters include an unbalanced block comment, the\n      // function must be rejected. Since JavaScript does not allow nested\n      // comments we can include a trailing block comment to catch this.\n      functionParams += '\\n/*``*/';\n    }\n\n    // todo: fix `this` binding in Function().\n    const src = `(function(${functionParams}){\\n${functionBody}\\n})`;\n\n    return safeEval(src);\n  };\n\n  // Ensure that Function from any compartment in a root realm can be used\n  // with instance checks in any compartment of the same root realm.\n  setPrototypeOf(safeFunction, unsafeFunction.prototype);\n\n  assert(getPrototypeOf(safeFunction).constructor !== Function, 'hide Function');\n  assert(getPrototypeOf(safeFunction).constructor !== unsafeFunction, 'hide unsafeFunction');\n\n  // Ensure that any function created in any compartment in a root realm is an\n  // instance of Function in any compartment of the same root ralm.\n  defineProperty(safeFunction, 'prototype', { value: unsafeFunction.prototype });\n\n  // Provide a custom output without overwriting the Function.prototype.toString\n  // which is called by some third-party libraries.\n  defineProperty(safeFunction, 'toString', {\n    value: safeEval(\"() => 'function Function() { [shim code] }'\"),\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  return safeFunction;\n}\n","import { createRealmFacade, buildChildRealm } from './realmFacade';\nimport { createNewUnsafeRec, createCurrentUnsafeRec } from './unsafeRec';\nimport {\n  createSafeEvaluatorFactory,\n  createSafeEvaluator,\n  createSafeEvaluatorWhichTakesEndowments,\n  createFunctionEvaluator\n} from './evaluators';\nimport { assert } from './utilities';\nimport { create, defineProperties, freeze, arrayConcat } from './commons';\n\n// Mimic private members on the realm instances.\n// We define it in the same module and do not export it.\nconst RealmRecForRealmInstance = new WeakMap();\n\nfunction getRealmRecForRealmInstance(realm) {\n  // Detect non-objects.\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\n  // Realm instance has no realmRec. Should not proceed.\n  assert(RealmRecForRealmInstance.has(realm), 'Realm instance has no record');\n\n  return RealmRecForRealmInstance.get(realm);\n}\n\nfunction registerRealmRecForRealmInstance(realm, realmRec) {\n  // Detect non-objects.\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\n  // Attempt to change an existing realmRec on a realm instance. Should not proceed.\n  assert(!RealmRecForRealmInstance.has(realm), 'Realm instance already has a record');\n\n  RealmRecForRealmInstance.set(realm, realmRec);\n}\n\n// Initialize the global variables for the new Realm.\nfunction setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction) {\n  defineProperties(safeGlobal, sharedGlobalDescs);\n\n  defineProperties(safeGlobal, {\n    eval: {\n      value: safeEval,\n      writable: true,\n      configurable: true\n    },\n    Function: {\n      value: safeFunction,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nfunction createRealmRec(unsafeRec) {\n  const { sharedGlobalDescs, unsafeGlobal } = unsafeRec;\n\n  const safeGlobal = create(unsafeGlobal.Object.prototype);\n  const safeEvaluatorFactory = createSafeEvaluatorFactory(unsafeRec, safeGlobal);\n  const safeEval = createSafeEvaluator(safeEvaluatorFactory);\n  const safeEvalWhichTakesEndowments = createSafeEvaluatorWhichTakesEndowments(\n    safeEvaluatorFactory\n  );\n  const safeFunction = createFunctionEvaluator(unsafeRec, safeEval);\n\n  setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction);\n\n  const realmRec = freeze({\n    safeGlobal,\n    safeEval,\n    safeEvalWhichTakesEndowments,\n    safeFunction\n  });\n\n  return realmRec;\n}\n\n/**\n * A root realm uses a fresh set of new intrinics. Here we first create\n * a new unsafe record, which inherits the shims. Then we proceed with\n * the creation of the realm record, and we apply the shims.\n */\nfunction initRootRealm(parentUnsafeRec, self, options) {\n  // note: 'self' is the instance of the Realm.\n\n  // todo: investigate attacks via Array.species\n  // todo: this accepts newShims='string', but it should reject that\n  const { shims: newShims } = options;\n  const allShims = arrayConcat(parentUnsafeRec.allShims, newShims);\n\n  // The unsafe record is created already repaired.\n  const unsafeRec = createNewUnsafeRec(allShims);\n\n  // eslint-disable-next-line no-use-before-define\n  const Realm = createRealmFacade(unsafeRec, BaseRealm);\n\n  // Add a Realm descriptor to sharedGlobalDescs, so it can be defined onto the\n  // safeGlobal like the rest of the globals.\n  unsafeRec.sharedGlobalDescs.Realm = {\n    value: Realm,\n    writable: true,\n    configurable: true\n  };\n\n  // Creating the realmRec provides the global object, eval() and Function()\n  // to the realm.\n  const realmRec = createRealmRec(unsafeRec);\n\n  // Apply all shims in the new RootRealm. We don't do this for compartments.\n  const { safeEvalWhichTakesEndowments } = realmRec;\n  for (const shim of allShims) {\n    safeEvalWhichTakesEndowments(shim);\n  }\n\n  // The realmRec acts as a private field on the realm instance.\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\n/**\n * A compartment shares the intrinsics of its root realm. Here, only a\n * realmRec is necessary to hold the global object, eval() and Function().\n */\nfunction initCompartment(unsafeRec, self) {\n  // note: 'self' is the instance of the Realm.\n\n  const realmRec = createRealmRec(unsafeRec);\n\n  // The realmRec acts as a private field on the realm instance.\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\nfunction getRealmGlobal(self) {\n  const { safeGlobal } = getRealmRecForRealmInstance(self);\n  return safeGlobal;\n}\n\nfunction realmEvaluate(self, x, endowments = {}) {\n  // todo: don't pass in primal-realm objects like {}, for safety. OTOH its\n  // properties are copied onto the new global 'target'.\n  // todo: figure out a way to membrane away the contents to safety.\n  const { safeEvalWhichTakesEndowments } = getRealmRecForRealmInstance(self);\n  return safeEvalWhichTakesEndowments(x, endowments);\n}\n\nconst BaseRealm = {\n  initRootRealm,\n  initCompartment,\n  getRealmGlobal,\n  realmEvaluate\n};\n\n// Create the current unsafeRec from the current \"primal\" environment (the realm\n// where the Realm shim is loaded and executed).\nconst currentUnsafeRec = createCurrentUnsafeRec();\n\n/**\n * The \"primal\" realm class is defined in the current \"primal\" environment,\n * and is part of the shim. There is no need to facade this class via evaluation\n * because both share the same intrinsics.\n */\nconst Realm = buildChildRealm(currentUnsafeRec, BaseRealm);\n\nexport default Realm;\n","// Declare shorthand functions. Sharing these declarations across modules\n// improves both consistency and minification. Unused declarations are\n// dropped by the tree shaking process.\n\n// we capture these, not just for brevity, but for security. If any code\n// modifies Object to change what 'assign' points to, the Realm shim would be\n// corrupted.\n\nexport const {\n  assign,\n  create,\n  defineProperties,\n  defineProperty,\n  freeze,\n  getOwnPropertyDescriptor,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  getPrototypeOf,\n  setPrototypeOf\n} = Object;\n\nexport const {\n  apply,\n  ownKeys // Reflect.ownKeys includes Symbols and unenumerables, unlike Object.keys()\n} = Reflect;\n\n/**\n * uncurryThis()\n * See http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n * which only lives at http://web.archive.org/web/20160805225710/http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n *\n * Performance:\n * 1. The native call is about 10x faster on FF than chrome\n * 2. The version using Function.bind() is about 100x slower on FF, equal on chrome, 2x slower on Safari\n * 3. The version using a spread and Reflect.apply() is about 10x slower on FF, equal on chrome, 2x slower on Safari\n *\n * const bind = Function.prototype.bind;\n * const uncurryThis = bind.bind(bind.call);\n */\nconst uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n\n// We also capture these for security: changes to Array.prototype after the\n// Realm shim runs shouldn't affect subsequent Realm operations.\nexport const objectHasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty),\n  arrayForEach = uncurryThis(Array.prototype.forEach),\n  arrayFilter = uncurryThis(Array.prototype.filter),\n  arrayPush = uncurryThis(Array.prototype.push),\n  arrayPop = uncurryThis(Array.prototype.pop),\n  arrayJoin = uncurryThis(Array.prototype.join),\n  arrayConcat = uncurryThis(Array.prototype.concat),\n  regexpTest = uncurryThis(RegExp.prototype.test),\n  stringMatch = uncurryThis(String.prototype.match),\n  stringIncludes = uncurryThis(String.prototype.includes);\n"],"names":["throwTantrum","s","err","msg","console","error","stack","assert","condition","message","cleanupSource","src","buildChildRealm","unsafeRec","BaseRealm","callAndWrapError","target","args","Object","eName","eMessage","eStack","name","ignored","Error","ErrorConstructor","errorConstructors","get","err2","initRootRealm","initCompartment","getRealmGlobal","realmEvaluate","create","defineProperty","Map","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","Realm","constructor","makeRootRealm","options","r","prototype","makeCompartment","global","evaluate","x","endowments","value","writable","enumerable","configurable","createRealmFacade","unsafeEval","buildChildRealmString","getSharedGlobalDescs","unsafeGlobal","descriptors","Infinity","NaN","undefined","sharedGlobalPropertyNames","desc","getOwnPropertyDescriptor","repairAccessors","toObject","obj","asPropertyName","aFunction","accessor","defineProperties","getPrototypeOf","objectPrototype","__lookupGetter__","ignore","__defineGetter__","prop","func","O","__defineSetter__","set","__lookupSetter__","repairFunctions","repairFunction","declaration","FunctionInstance","eval","e","FunctionPrototype","TamedFunction","Function","setPrototypeOf","createUnsafeRec","allShims","sharedGlobalDescs","freeze","unsafeFunction","createNewUnsafeRec","getNewUnsafeGlobal","repairAccessorsShim","repairFunctionsShim","getOptimizableGlobals","safeGlobal","descs","getOwnPropertyDescriptors","constants","arrayFilter","getOwnPropertyNames","keywords","has","regexpTest","identifierPattern","objectHasOwnProperty","createScopeHandler","useUnsafeEvaluator","__proto__","alwaysThrowHandler","allowUnsafeEvaluatorOnce","unsafeEvaluatorAllowed","Symbol","unscopables","rejectImportExpressions","matches","importParser","exec","linenum","split","length","buildOptimizer","arrayJoin","createScopedEvaluatorFactory","optimizer","createSafeEvaluatorFactory","scopeHandler","optimizableGlobals","scopedEvaluatorFactory","scopeTarget","scopeProxy","Proxy","scopedEvaluator","apply","safeEval","createSafeEvaluator","safeEvaluatorFactory","createSafeEvaluatorWhichTakesEndowments","createFunctionEvaluator","safeFunction","params","functionBody","arrayPop","functionParams","stringIncludes","getRealmRecForRealmInstance","realm","RealmRecForRealmInstance","registerRealmRecForRealmInstance","realmRec","setDefaultBindings","createRealmRec","safeEvalWhichTakesEndowments","assign","ownKeys","Reflect","uncurryThis","fn","thisArg","hasOwnProperty","Array","filter","pop","join","arrayConcat","concat","RegExp","test","String","includes","isNode","exports","module","isBrowser","document","vm","require","unsafeGlobalSrc","unsafeGlobalEvalSrc","runInNewContext","iframe","createElement","style","display","body","appendChild","contentWindow","Set","WeakMap","parentUnsafeRec","self","shims","newShims","shim","currentUnsafeRec"],"mappings":"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"}