{"version":3,"file":"realm-shim.min.js","sources":["../src/realmFacade.js","../src/stdlib.js","../src/accessors.js","../src/functions.js","../src/unsafeRec.js","../src/block-imports.js","../src/utilities.js","../src/evaluators.js","../src/realm.js","../src/commons.js","../src/scopeHandler.js"],"sourcesContent":["// Note: do not import anything to this file to prevent using implicit\n// dependencies.\n\n// buildChildRealm is immediately turned into a string, and this function is\n// never referenced again, because it closes over the wrong intrinsics\n\n// todo: This function is stringified and evaluated outside of the primal\n// realms and it currently can't contain code coverage metrics.\n/* istanbul ignore next */\nfunction buildChildRealm({ initRootRealm, initCompartment, getRealmGlobal, realmEvaluate }) {\n  // This Object and Reflect are brand new, from a new unsafeRec, so no user\n  // code has been run or had a chance to manipulate them. We extract these\n  // properties for brevity, not for security. Don't ever run this function\n  // *after* user code has had a chance to pollute its environment, or it\n  // could be used to gain access to BaseRealm and primal-realm Error\n  // objects.\n  const { defineProperty } = Object;\n\n  const errorConstructors = new Map([\n    ['EvalError', EvalError],\n    ['RangeError', RangeError],\n    ['ReferenceError', ReferenceError],\n    ['SyntaxError', SyntaxError],\n    ['TypeError', TypeError],\n    ['URIError', URIError]\n  ]);\n\n  // Like Realm.apply except that it catches anything thrown and rethrows it\n  // as an Error from this realm\n  function callAndWrapError(target, ...args) {\n    try {\n      return target(...args);\n    } catch (err) {\n      if (Object(err) !== err) {\n        // err is a primitive value, which is safe to rethrow\n        throw err;\n      }\n      let eName, eMessage, eStack;\n      try {\n        // The child environment might seek to use 'err' to reach the\n        // parent's intrinsics and corrupt them. `${err.name}` will cause\n        // string coercion of 'err.name'. If err.name is an object (probably\n        // a String of the parent Realm), the coercion uses\n        // err.name.toString(), which is under the control of the parent. If\n        // err.name were a primitive (e.g. a number), it would use\n        // Number.toString(err.name), using the child's version of Number\n        // (which the child could modify to capture its argument for later\n        // use), however primitives don't have properties like .prototype so\n        // they aren't useful for an attack.\n        eName = `${err.name}`;\n        eMessage = `${err.message}`;\n        eStack = `${err.stack}`;\n        // eName/eMessage/eStack are now child-realm primitive strings, and\n        // safe to expose\n      } catch (ignored) {\n        // if err.name.toString() throws, keep the (parent realm) Error away\n        // from the child\n        throw new Error('unknown error');\n      }\n      const ErrorConstructor = errorConstructors.get(eName) || Error;\n      try {\n        throw new ErrorConstructor(eMessage);\n      } catch (err2) {\n        err2.stack = eStack; // replace with the captured inner stack\n        throw err2;\n      }\n    }\n  }\n\n  class Realm {\n    static makeRootRealm(...args) {\n      const r = new Realm();\n      callAndWrapError(initRootRealm, Realm, r, ...args);\n      return r;\n    }\n\n    static makeCompartment(...args) {\n      const r = new Realm();\n      callAndWrapError(initCompartment, Realm, r, ...args);\n      return r;\n    }\n\n    // we omit the constructor because it is empty. All the personalization\n    // takes place in one of the two static methods,\n    // makeRootRealm/makeCompartment\n\n    get global() {\n      // this is safe against being called with strange 'this' because\n      // baseGetGlobal immediately does a trademark check (it fails unless\n      // this 'this' is present in a weakmap that is only populated with\n      // legitimate Realm instances)\n      return callAndWrapError(getRealmGlobal, this);\n    }\n\n    evaluate(...args) {\n      // safe against strange 'this', as above\n      return callAndWrapError(realmEvaluate, this, ...args);\n    }\n  }\n\n  defineProperty(Realm.prototype, 'toString', {\n    value: () => 'function Realm() { [shim code] }',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  return Realm;\n}\n\n// the parentheses means we don't bind the 'buildChildRealm' name inside the\n// child's namespace. this would accept an anonymous function declaration.\n// function expression (not a declaration) so it has a completion value.\nconst buildChildRealmString = `'use strict'; (${buildChildRealm})`;\n\nexport function createRealmFacade(unsafeRec, BaseRealm) {\n  const { unsafeEval } = unsafeRec;\n\n  // The BaseRealm is the Realm class created by\n  // the shim. It's only valid for the context where\n  // it was parsed.\n\n  // The Realm facade is a lightweight class built in the\n  // context a different context, that provide a fully\n  // functional Realm class using the intrisics\n  // of that context.\n\n  // This process is simplified because all methods\n  // and properties on a realm instance already return\n  // values using the intrinsics of the realm's context.\n\n  // Invoke the BaseRealm constructor with Realm as the prototype.\n  return unsafeEval(buildChildRealmString)(BaseRealm);\n}\n","// All the following stdlib items have the same name on both our intrinsics\n// object and on the global object. Unlike Infinity/NaN/undefined, these\n// should all be writable and configurable.\nconst sharedGlobalPropertyNames = [\n  // *** 18.2 Function Properties of the Global Object\n\n  // 'eval', // comes from safeEval instead\n  'isFinite',\n  'isNaN',\n  'parseFloat',\n  'parseInt',\n\n  'decodeURI',\n  'decodeURIComponent',\n  'encodeURI',\n  'encodeURIComponent',\n\n  // *** 18.3 Constructor Properties of the Global Object\n\n  'Array',\n  'ArrayBuffer',\n  'Boolean',\n  'DataView',\n  'Date',\n  'Error',\n  'EvalError',\n  'Float32Array',\n  'Float64Array',\n  // 'Function', // comes from safeFunction instead\n  'Int8Array',\n  'Int16Array',\n  'Int32Array',\n  'Map',\n  'Number',\n  'Object',\n  'Promise',\n  'Proxy',\n  'RangeError',\n  'ReferenceError',\n  'RegExp',\n  'Set',\n  // 'SharedArrayBuffer' // removed on Jan 5, 2018\n  'String',\n  'Symbol',\n  'SyntaxError',\n  'TypeError',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Uint16Array',\n  'Uint32Array',\n  'URIError',\n  'WeakMap',\n  'WeakSet',\n\n  // *** 18.4 Other Properties of the Global Object\n\n  // 'Atomics', // removed on Jan 5, 2018\n  'JSON',\n  'Math',\n  'Reflect',\n\n  // *** Annex B\n\n  'escape',\n  'unescape',\n\n  // *** ECMA-402\n\n  'Intl'\n\n  // *** ESNext\n\n  // 'Realm' // Comes from createRealmGlobalObject()\n];\n\nexport function getSharedGlobalDescs(unsafeGlobal) {\n  const descriptors = {\n    // *** 18.1 Value Properties of the Global Object\n    Infinity: { value: Infinity },\n    NaN: { value: NaN },\n    undefined: { value: undefined }\n  };\n\n  for (const name of sharedGlobalPropertyNames) {\n    descriptors[name] = {\n      // todo: if there's a get/accessor on the global, do we want to invoke\n      // it or throw an error?\n      // todo: get a descriptor here, so we can check\n      value: unsafeGlobal[name],\n      writable: true,\n      configurable: true\n    };\n  }\n\n  return descriptors;\n}\n","// Adapted from SES/Caja - Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * Replace the legacy accessors of Object to comply with strict mode\n * and ES2016 semantics, we do this by redefining them while in 'use strict'.\n *\n * todo: list the issues resolved\n *\n * This function can be used in two ways: (1) invoked directly to fix the primal\n * realm's Object.prototype, and (2) converted to a string to be executed\n * inside each new RootRealm to fix their Object.prototypes. Evaluation requires\n * the function to have no dependencies, so don't import anything from the outside.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\n\n// todo: This function is stringified and evaluated outside of the primal\n// realms and it currently can't contain code coverage metrics.\n/* istanbul ignore file */\nexport function repairAccessors() {\n  const {\n    defineProperty,\n    defineProperties,\n    getOwnPropertyDescriptor,\n    getPrototypeOf,\n    prototype: objectPrototype\n  } = Object;\n\n  // On some platforms, the implementation of these functions act as if they are\n  // in sloppy mode: if they're invoked badly, they will expose the global object,\n  // so we need to repair these for security. Thus it is our responsibility to fix\n  // this, and we need to include repairAccessors. E.g. Chrome in 2016.\n\n  try {\n    // Verify that the method is not callable.\n    // eslint-disable-next-line no-restricted-properties, no-underscore-dangle\n    objectPrototype.__lookupGetter__('dummy');\n  } catch (ignore) {\n    // Throws, no need to patch.\n    return;\n  }\n\n  function toObject(obj) {\n    if (obj === undefined || obj === null) {\n      throw new TypeError(`can't convert undefined or null to object`);\n    }\n    return Object(obj);\n  }\n\n  function asPropertyName(obj) {\n    if (typeof obj === 'symbol') {\n      return obj;\n    }\n    return `${obj}`;\n  }\n\n  function aFunction(obj, accessor) {\n    if (typeof obj !== 'function') {\n      throw TypeError(`invalid ${accessor} usage`);\n    }\n    return obj;\n  }\n\n  defineProperties(objectPrototype, {\n    __defineGetter__: {\n      value: function __defineGetter__(prop, func) {\n        const O = toObject(this);\n        defineProperty(O, prop, {\n          get: aFunction(func, 'getter'),\n          enumerable: true,\n          configurable: true\n        });\n      }\n    },\n    __defineSetter__: {\n      value: function __defineSetter__(prop, func) {\n        const O = toObject(this);\n        defineProperty(O, prop, {\n          set: aFunction(func, 'setter'),\n          enumerable: true,\n          configurable: true\n        });\n      }\n    },\n    __lookupGetter__: {\n      value: function __lookupGetter__(prop) {\n        let O = toObject(this);\n        prop = asPropertyName(prop);\n        let desc;\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n          O = getPrototypeOf(O);\n        }\n        return desc && desc.get;\n      }\n    },\n    __lookupSetter__: {\n      value: function __lookupSetter__(prop) {\n        let O = toObject(this);\n        prop = asPropertyName(prop);\n        let desc;\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n          O = getPrototypeOf(O);\n        }\n        return desc && desc.set;\n      }\n    }\n  });\n}\n","// Adapted from SES/Caja\n// Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * This block replaces the original Function constructor, and the original\n * %GeneratorFunction% %AsyncFunction% and %AsyncGeneratorFunction%, with\n * safe replacements that throw if invoked. \n *\n * These are all reachable via syntax, so it isn't sufficient to just \n * replace global properties with safe versions. Our main goal is to prevent \n * access to the Function constructor through these starting points.\n\n * After this block is done, the originals must no longer be reachable, unless \n * a copy has been made, and funtions can only be created by syntax (using eval) \n * or by invoking a previously saved reference to the originals.\n */\n\n// todo: This function is stringified and evaluated outside of the primal\n// realms and it currently can't contain code coverage metrics.\n/* istanbul ignore file */\nexport function repairFunctions() {\n  const { defineProperty, getPrototypeOf, setPrototypeOf } = Object;\n\n  /**\n   * The process to repair constructors:\n   * 1. Create an instance of the function by evaluating syntax\n   * 2. Obtain the prototype from the instance\n   * 3. Create a substitute tamed constructor\n   * 4. Replace the original constructor with the tamed constructor\n   * 5. Replace tamed constructor prototype property with the original one\n   * 6. Replace its [[Prototype]] slot with the tamed constructor of Function\n   */\n  function repairFunction(name, declaration) {\n    let FunctionInstance;\n    try {\n      // Use Function() because eval() has issues with serializing functions under the esm module.\n      // TODO: investigate esm distortion of source code.\n      // eslint-disable-next-line no-new-func\n      FunctionInstance = Function(`return ${declaration}`)();\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        // Prevent failure on platforms where async and/or generators are not supported.\n        return;\n      }\n      // Re-throw\n      throw e;\n    }\n    const FunctionPrototype = getPrototypeOf(FunctionInstance);\n\n    // Prevents the evaluation of source when calling constructor on the prototype of functions.\n    // eslint-disable-next-line no-new-func\n    const TamedFunction = Function('throw new Error(\"Not available\");');\n    defineProperty(TamedFunction, 'name', { value: name });\n\n    // (new Error()).constructors does not inherit from Function, because Error\n    // was defined before ES6 classes. So we don't need to repair it too.\n\n    // (Error()).constructor inherit from Function, which gets a tamed constructor here.\n\n    // todo: in an ES6 class that does not inherit from anything, what does its\n    // constructor inherit from? We worry that it inherits from Function, in\n    // which case instances could give access to unsafeFunction. markm says\n    // we're fine: the constructor inherits from Object.prototype\n\n    // This line replaces the original constructor in the prototype chain\n    // with the tamed one. No copy of the original is peserved.\n    defineProperty(FunctionPrototype, 'constructor', { value: TamedFunction });\n\n    // This line sets the tamed constructor's prototype data property to\n    // the original one.\n    defineProperty(TamedFunction, 'prototype', { value: FunctionPrototype });\n\n    if (TamedFunction !== Function.prototype.constructor) {\n      // Ensures that all functions meet \"instanceof Function\" in a realm.\n      setPrototypeOf(TamedFunction, Function.prototype.constructor);\n    }\n  }\n\n  // Here, the order of operation is important: Function needs to be repaired\n  // first since the other repaired constructors need to inherit from the tamed\n  // Function function constructor.\n\n  // note: this really wants to be part of the standard, because new\n  // constructors may be added in the future, reachable from syntax, and this\n  // list must be updated to match.\n\n  repairFunction('Function', '(function(){})');\n  // \"plain arrow functions\" inherit from Function.prototype\n  repairFunction('GeneratorFunction', '(function*(){})');\n  repairFunction('AsyncFunction', '(async function(){})');\n  repairFunction('AsyncGeneratorFunction', '(async function*(){})');\n}\n","// this module must never be importable outside the Realm shim itself\nimport { getSharedGlobalDescs } from './stdlib';\nimport { repairAccessors } from './accessors';\nimport { repairFunctions } from './functions';\nimport { freeze } from './commons';\n\n// A \"context\" is a fresh unsafe Realm as given to us by existing platforms.\n// We need this to implement the shim. However, when Realms land for real,\n// this feature will be provided by the underlying engine instead.\n\n// Detection used in RollupJS.\nconst isNode = typeof exports === 'object' && typeof module !== 'undefined';\nconst isBrowser = typeof document === 'object';\nif ((!isNode && !isBrowser) || (isNode && isBrowser)) {\n  throw new Error('unexpected platform, unable to create Realm');\n}\nconst vm = isNode ? require('vm') : undefined;\n\n// note: in a node module, the top-level 'this' is not the global object\n// (it's *something* but we aren't sure what), however an indirect eval of\n// 'this' will be the correct global object.\n\nconst unsafeGlobalSrc = \"'use strict'; this\";\nconst unsafeGlobalEvalSrc = `(0, eval)(\"'use strict'; this\")`;\n\nfunction createNewUnsafeGlobalForNode() {\n  // Use unsafeGlobalEvalSrc to ensure we get the right 'this'.\n  const unsafeGlobal = vm.runInNewContext(unsafeGlobalEvalSrc);\n\n  return unsafeGlobal;\n}\n\nfunction createNewUnsafeGlobalForBrowser() {\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n\n  document.body.appendChild(iframe);\n  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);\n\n  // We keep the iframe attached to the DOM because removing it\n  // causes its global object to lose intrinsics, its eval()\n  // function to evaluate code, etc.\n\n  // TODO: can we remove and garbage-collect the iframes?\n\n  return unsafeGlobal;\n}\n\n// we only export this so test-repair.js can get an unrepaired\n// Object.prototype, to sense if this platform has the buggy behavior\nexport const getNewUnsafeGlobal = isNode\n  ? createNewUnsafeGlobalForNode\n  : createNewUnsafeGlobalForBrowser;\n\n// The unsafeRec is shim-specific. It acts as the mechanism to obtain a fresh\n// set of intrinsics together with their associated eval and Function\n// evaluators. These must be used as a matched set, since the evaluators are\n// tied to a set of intrinsics, aka the \"undeniables\". If it were possible to\n// mix-and-match them from different contexts, that would enable some\n// attacks.\nfunction createUnsafeRec(unsafeGlobal, allShims) {\n  const sharedGlobalDescs = getSharedGlobalDescs(unsafeGlobal);\n\n  return freeze({\n    unsafeGlobal,\n    sharedGlobalDescs,\n    unsafeEval: unsafeGlobal.eval,\n    unsafeFunction: unsafeGlobal.Function,\n    allShims\n  });\n}\n\nconst repairAccessorsShim = `\"use strict\"; (${repairAccessors})();`;\nconst repairFunctionsShim = `\"use strict\"; (${repairFunctions})();`;\n\n// Create a new unsafeRec from a brand new context, with new intrinsics and a\n// new global object\nexport function createNewUnsafeRec(allShims) {\n  const unsafeGlobal = getNewUnsafeGlobal();\n  unsafeGlobal.eval(repairAccessorsShim);\n  unsafeGlobal.eval(repairFunctionsShim);\n  return createUnsafeRec(unsafeGlobal, allShims);\n}\n\n// Create a new unsafeRec from the current context, where the Realm shim is\n// being parsed and executed, aka the \"Primal Realm\"\nexport function createCurrentUnsafeRec() {\n  const unsafeGlobal = (0, eval)(unsafeGlobalSrc);\n  repairAccessors();\n  repairFunctions();\n  return createUnsafeRec(unsafeGlobal, []);\n}\n","// this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\n// U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\n// whitespace by the parser, but not matched by /\\s/, then this would admit\n// an attack like: import\\u2028('power.js') . We're trying to distinguish\n// something like that from something like importnotreally('power.js') which\n// is perfectly safe.\n\nconst scanner = /^(.*)\\bimport\\s*(\\(|\\/\\/|\\/\\*)/m;\n\nexport function rejectImportExpressions(s) {\n  const matches = scanner.exec(s);\n  if (matches) {\n    // todo: if we have a full parser available, use it here. If there is no\n    // 'import' token in the string, we're safe.\n    // if (!parse(s).contains('import')) return;\n    const linenum = matches[1].split('\\n').length; // more or less\n    throw new SyntaxError(`possible import expression rejected around line ${linenum}`);\n  }\n}\n","// we'd like to abandon, but we can't, so just scream and break a lot of\n// stuff. However, since we aren't really aborting the process, be careful to\n// not throw an Error object which could be captured by child-Realm code and\n// used to access the (too-powerful) primal-realm Error object.\n\nexport function throwTantrum(s, err = undefined) {\n  const msg = `please report internal shim error: ${s}`;\n\n  // note: we really do want to log these 'should never happen' things. there\n  // might be a better way to convince the linter, though.\n  // eslint-disable-next-line no-console\n  console.error(msg);\n  if (err) {\n    // eslint-disable-next-line no-console\n    console.error(`${err}`);\n    // eslint-disable-next-line no-console\n    console.error(`${err.stack}`);\n  }\n\n  // eslint-disable-next-line no-debugger\n  debugger;\n  throw msg;\n}\n\nexport function assert(condition, message) {\n  if (!condition) {\n    throwTantrum(`failed to: ${message}`);\n  }\n}\n","// Portions adapted from V8 - Copyright 2016 the V8 project authors.\n// https://github.com/v8/v8/blob/master/src/builtins/builtins-function.cc\n\nimport {\n  apply,\n  arrayJoin,\n  arrayFilter,\n  arrayPop,\n  create,\n  defineProperty,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  getPrototypeOf,\n  regexpMatch,\n  setPrototypeOf,\n  stringIncludes\n} from './commons';\nimport { ScopeHandler } from './scopeHandler';\nimport { rejectImportExpressions } from './block-imports';\nimport { assert, throwTantrum } from './utilities';\n\n// admit many (but not all) legal variable names: starts with letter/_/$,\n// continues with letter/digit/_/$ . It will reject many legal names that\n// involve unicode characters. We use 'apply' rather than /../.match() in\n// case RegExp has been poisoned.\nconst identifierPattern = /^[a-zA-Z_$][\\w_$]*$/;\n\n// todo: think about how this interacts with endowments, check for conflicts\n// between the names being optimized and the ones added by endowments\n\nfunction getOptimizableGlobals(safeGlobal) {\n  const descs = getOwnPropertyDescriptors(safeGlobal);\n\n  const constants = arrayFilter(getOwnPropertyNames(descs), name => {\n    // Ensure we have a valid identifier.\n    // getOwnPropertyNames does ignore Symbols so we don't need this extra check:\n    // typeof name === 'string' &&\n    if (!regexpMatch(identifierPattern, name)) {\n      return false;\n    }\n\n    const desc = descs[name];\n    return (\n      //\n      // getters will not have .writable, don't let the falsyness of\n      // 'undefined' trick us: test with === false, not ! . However descriptors\n      // inherit from the (potentially poisoned) global object, so we might see\n      // extra properties which weren't really there. Accessor properties have\n      // 'get/set/enumerable/configurable', while data properties have\n      // 'value/writable/enumerable/configurable'.\n      desc.configurable === true &&\n      desc.writable === true &&\n      //\n      // Check for accessor properties: we don't want to optimize these,\n      // they're obviously non-constant. Value properties can't have\n      // accessors at the same time, so this check is sufficient.\n      'value' in desc\n    );\n  });\n\n  return constants;\n}\n\nfunction buildOptimizer(constants) {\n  if (constants.length === 0) return '';\n  return `const {${arrayJoin(constants, ',')}} = arguments[0];`;\n}\n\nfunction createScopedEvaluatorFactory(unsafeRec, constants) {\n  const { unsafeFunction } = unsafeRec;\n\n  const optimizer = buildOptimizer(constants);\n\n  // Create a function in sloppy mode, so that we can use 'with'. It returns\n  // a function in strict mode that evaluates the provided code using direct\n  // eval, and thus in strict mode in the same scope. We must be very careful\n  // to not create new names in this scope\n\n  // 1: we use 'with' (around a Proxy) to catch all free variable names. The\n  // first 'arguments[0]' holds the Proxy which safely wraps the safeGlobal\n  // 2: 'optimizer' catches common variable names for speed\n  // 3: The inner strict function is effectively passed two parameters:\n  //    a) its arguments[0] is the source to be directly evaluated.\n  //    b) its 'this' is the this binding seen by the code being directly evaluated.\n\n  // everything in the 'optimizer' string is looked up in the proxy\n  // (including an 'arguments[0]', which points at the Proxy). 'function' is\n  // a keyword, not a variable, so it is not looked up. then 'eval' is looked\n  // up in the proxy, that's the first time it is looked up after\n  // useUnsafeEvaluator is turned on, so the proxy returns the real the\n  // unsafeEval, which satisfies the IsDirectEvalTrap predicate, so it uses\n  // the direct eval and gets the lexical scope. The second 'arguments[0]' is\n  // looked up in the context of the inner function. The *contents* of\n  // arguments[0], because we're using direct eval, are looked up in the\n  // Proxy, by which point the useUnsafeEvaluator switch has been flipped\n  // back to 'false', so any instances of 'eval' in that string will get the\n  // safe evaluator.\n\n  // todo: This function is stringified and evaluated outside of the primal\n  // realms and it currently can't contain code coverage metrics.\n  /* istanbul ignore next */\n  return unsafeFunction(`\n    with (arguments[0]) {\n      ${optimizer}\n      return function() {\n        'use strict';\n        return eval(arguments[0]);\n      };\n    }\n  `);\n}\n\nexport function createSafeEvaluatorFactory(unsafeRec, safeGlobal) {\n  const { unsafeFunction } = unsafeRec;\n\n  const scopeHandler = new ScopeHandler(unsafeRec);\n  const optimizableGlobals = getOptimizableGlobals(safeGlobal);\n  const scopedEvaluatorFactory = createScopedEvaluatorFactory(unsafeRec, optimizableGlobals);\n\n  function factory(endowments) {\n    // todo (shim limitation): scan endowments, throw error if endowment\n    // overlaps with the const optimization (which would otherwise\n    // incorrectly shadow endowments), or if endowments includes 'eval'. Also\n    // prohibit accessor properties (to be able to consistently explain\n    // things in terms of shimming the global lexical scope).\n    // writeable-vs-nonwritable == let-vs-const, but there's no\n    // global-lexical-scope equivalent of an accessor, outside what we can\n    // explain/spec\n    const scopeTarget = create(safeGlobal, getOwnPropertyDescriptors(endowments));\n    const scopeProxy = new Proxy(scopeTarget, scopeHandler);\n    const scopedEvaluator = scopedEvaluatorFactory(scopeProxy);\n\n    // We use the the concise method syntax to create an eval without a\n    // [[Construct]] behavior (such that the invocation \"new eval()\" throws\n    // TypeError: eval is not a constructor\"), but which still accepts a\n    // 'this' binding.\n    const safeEval = {\n      eval(src) {\n        src = `${src}`;\n        rejectImportExpressions(src);\n        scopeHandler.useUnsafeEvaluator = true;\n        let err;\n        try {\n          // Ensure that \"this\" resolves to the safe global.\n          return apply(scopedEvaluator, safeGlobal, [src]);\n        } catch (e) {\n          // stash the child-code error in hopes of debugging the internal failure\n          err = e;\n          throw e;\n        } finally {\n          // belt and suspenders: the proxy switches this off immediately after\n          // the first access, but just in case we clear it here too\n          if (scopeHandler.useUnsafeEvaluator !== false) {\n            scopeHandler.useUnsafeEvaluator = false;\n            throwTantrum('handler sets useUnsafeEvaluator = false', err);\n          }\n        }\n      }\n    }.eval;\n\n    // safeEval's prototype is currently the primal realm's\n    // Function.prototype, which we must not let escape. To make 'eval\n    // instanceof Function' be true inside the realm, we need to point it at\n    // the RootRealm's value.\n\n    // Ensure that eval from any compartment in a root realm is an instance\n    // of Function in any compartment of the same root realm.\n    setPrototypeOf(safeEval, unsafeFunction.prototype);\n\n    assert(getPrototypeOf(safeEval).constructor !== Function, 'hide Function');\n    assert(getPrototypeOf(safeEval).constructor !== unsafeFunction, 'hide unsafeFunction');\n\n    // note: be careful to not leak our primal Function.prototype by setting\n    // this to a plain arrow function. Now that we have safeEval, use it.\n    defineProperty(safeEval, 'toString', {\n      value: safeEval(\"() => 'function eval() { [shim code] }'\"),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    return safeEval;\n  }\n\n  return factory;\n}\n\nexport function createSafeEvaluator(safeEvaluatorFactory) {\n  return safeEvaluatorFactory({});\n}\n\nexport function createSafeEvaluatorWhichTakesEndowments(safeEvaluatorFactory) {\n  return (x, endowments) => safeEvaluatorFactory(endowments)(x);\n}\n\n/**\n * A safe version of the native Function which relies on\n * the safety of evalEvaluator for confinement.\n */\nexport function createFunctionEvaluator(unsafeRec, safeEval) {\n  const { unsafeFunction, unsafeGlobal } = unsafeRec;\n\n  const safeFunction = function Function(...params) {\n    const functionBody = `${arrayPop(params) || ''}`;\n    let functionParams = `${arrayJoin(params, ',')}`;\n\n    // Is this a real functionBody, or is someone attempting an injection\n    // attack? This will throw a SyntaxError if the string is not actually a\n    // function body. We coerce the body into a real string above to prevent\n    // someone from passing an object with a toString() that returns a safe\n    // string the first time, but an evil string the second time.\n    // eslint-disable-next-line no-new, new-cap\n    new unsafeFunction(functionBody);\n\n    if (stringIncludes(functionParams, ')')) {\n      // If the formal parameters string include ) - an illegal\n      // character - it may make the combined function expression\n      // compile. We avoid this problem by checking for this early on.\n\n      // note: v8 throws just like this does, but chrome accepts e.g. 'a = new Date()'\n      throw new unsafeGlobal.SyntaxError(\n        'shim limitation: Function arg string contains parenthesis'\n      );\n      // todo: shim integrity threat if they change SyntaxError\n    }\n\n    // todo: check to make sure this .length is safe. markm says safe.\n    if (functionParams.length > 0) {\n      // If the formal parameters include an unbalanced block comment, the\n      // function must be rejected. Since JavaScript does not allow nested\n      // comments we can include a trailing block comment to catch this.\n      functionParams += '\\n/*``*/';\n    }\n\n    const src = `(function(${functionParams}){\\n${functionBody}\\n})`;\n\n    return safeEval(src);\n  };\n\n  // Ensure that Function from any compartment in a root realm can be used\n  // with instance checks in any compartment of the same root realm.\n  setPrototypeOf(safeFunction, unsafeFunction.prototype);\n\n  assert(getPrototypeOf(safeFunction).constructor !== Function, 'hide Function');\n  assert(getPrototypeOf(safeFunction).constructor !== unsafeFunction, 'hide unsafeFunction');\n\n  // Ensure that any function created in any compartment in a root realm is an\n  // instance of Function in any compartment of the same root ralm.\n  defineProperty(safeFunction, 'prototype', { value: unsafeFunction.prototype });\n\n  // Provide a custom output without overwriting the Function.prototype.toString\n  // which is called by some third-party libraries.\n  defineProperty(safeFunction, 'toString', {\n    value: safeEval(\"() => 'function Function() { [shim code] }'\"),\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  return safeFunction;\n}\n","import { createRealmFacade } from './realmFacade';\nimport { createNewUnsafeRec, createCurrentUnsafeRec } from './unsafeRec';\nimport {\n  createSafeEvaluatorFactory,\n  createSafeEvaluator,\n  createSafeEvaluatorWhichTakesEndowments,\n  createFunctionEvaluator\n} from './evaluators';\nimport { create, defineProperty, defineProperties, freeze, arrayConcat } from './commons';\n\n// Create a registry to mimic a private static members on the realm classes.\n// We define it in the same module and do not export it.\n\nconst UnsafeRecForRealmClass = new WeakMap();\n\nfunction getUnsafeRecForRealmClass(RealmClass) {\n  if (Object(RealmClass) !== RealmClass) {\n    // Detect non-objects.\n    throw new TypeError('internal error: bad object, not a Realm constructor');\n  }\n  // spec just says throw TypeError\n  // todo: but shim should include a message\n  if (!UnsafeRecForRealmClass.has(RealmClass)) {\n    // RealmClass has no unsafeRec. Shoud not proceed.\n    throw new TypeError('internal error: bad object');\n  }\n  return UnsafeRecForRealmClass.get(RealmClass);\n}\n\nfunction registerUnsafeRecForRealmClass(RealmClass, unsafeRec) {\n  if (Object(RealmClass) !== RealmClass) {\n    // Detect non-objects.\n    throw new TypeError('internal error: bad object, not a Realm constructor');\n  }\n  // spec just says throw TypeError\n  // todo: but shim should include a message\n  if (UnsafeRecForRealmClass.has(RealmClass)) {\n    // Attempt to change an existing unsafeRec on a Realm. Shoud not proceed.\n    throw new TypeError('internal error: bad object');\n  }\n  UnsafeRecForRealmClass.set(RealmClass, unsafeRec);\n}\n\n// Create a registry to mimic a private members on the realm imtances.\n// We define it in the same module and do not export it.\n\nconst RealmRecForRealmInstance = new WeakMap();\n\nfunction getRealmRecForRealmInstance(realm) {\n  if (Object(realm) !== realm) {\n    // Detect non-objects.\n    throw new TypeError('bad object, not a Realm instance');\n  }\n  if (!RealmRecForRealmInstance.has(realm)) {\n    // Realm instance has no realmRec. Should not proceed.\n    throw new TypeError(\n      'bad object, use Realm.makeRootRealm() or .makeCompartment() instead of \"new Realm\"'\n    );\n  }\n  return RealmRecForRealmInstance.get(realm);\n}\n\nfunction registerRealmRecForRealmInstance(realm, realmRec) {\n  if (Object(realm) !== realm) {\n    // Detect non-objects.\n    throw new TypeError('internal error: bad object, not a Realm instance');\n  }\n  if (RealmRecForRealmInstance.has(realm)) {\n    // Attempt to change an existing realmRec on a realm instance. Should not proceed.\n    throw new TypeError('internal error: Realm instance is already present');\n  }\n  RealmRecForRealmInstance.set(realm, realmRec);\n}\n\n// Initialize the global variables for the new Realm.\nfunction setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction) {\n  defineProperties(safeGlobal, sharedGlobalDescs);\n\n  defineProperty(safeGlobal, 'eval', {\n    value: safeEval,\n    writable: true,\n    configurable: true\n  });\n\n  defineProperty(safeGlobal, 'Function', {\n    value: safeFunction,\n    writable: true,\n    configurable: true\n  });\n}\n\nfunction createRealmRec(unsafeRec) {\n  const { sharedGlobalDescs, unsafeGlobal } = unsafeRec;\n\n  const safeGlobal = create(unsafeGlobal.Object.prototype);\n  const safeEvaluatorFactory = createSafeEvaluatorFactory(unsafeRec, safeGlobal);\n  const safeEval = createSafeEvaluator(safeEvaluatorFactory);\n  const safeEvalWhichTakesEndowments = createSafeEvaluatorWhichTakesEndowments(\n    safeEvaluatorFactory\n  );\n  const safeFunction = createFunctionEvaluator(unsafeRec, safeEval);\n\n  setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction);\n\n  const realmRec = freeze({\n    safeGlobal,\n    safeEval,\n    safeEvalWhichTakesEndowments,\n    safeFunction\n  });\n\n  return realmRec;\n}\n\nfunction initRootRealm(selfClass, self, options) {\n  options = Object(options); // Todo: sanitize\n  // note: 'self' is the instance of the Realm, and 'selfClass' is the\n  // Realm constructor (facade) we build in buildChildRealm().\n\n  // In 'undefined' mode, intrinics are not provided, we create a root\n  // realm using the fresh set of new intrinics from a new context.\n\n  // todo: investigate attacks via Array.species\n  const newShims = options.shims || [];\n  const { allShims: oldShims } = getUnsafeRecForRealmClass(selfClass);\n  // todo: this accepts newShims='string', but it should reject that\n  const allShims = arrayConcat(oldShims, newShims);\n\n  // The unsafe record is returned with its constructors repaired.\n  const unsafeRec = createNewUnsafeRec(allShims);\n\n  // Define Realm onto new sharedGlobalDescs, so it can be copied onto the\n  // safeGlobal like the rest of the .\n  // eslint-disable-next-line no-use-before-define\n  const Realm = createRealmGlobalObject(unsafeRec);\n  registerUnsafeRecForRealmClass(Realm, unsafeRec);\n\n  const realmRec = createRealmRec(unsafeRec);\n  registerRealmRecForRealmInstance(self, realmRec);\n  // Now run all shims in the new RootRealm. We don't do this for\n  // compartments\n  for (const shim of allShims) {\n    // eslint-disable-next-line no-use-before-define\n    realmEvaluate(self, shim);\n  }\n}\n\nfunction initCompartment(selfClass, self) {\n  // note: 'self' is the instance of the Realm, and 'selfClass' is the\n  // Realm constructor (facade) we build in buildChildRealm().\n\n  // In \"inherit\" mode, we create a compartment realm and inherit\n  // the context since we share the intrinsics. We create a new\n  // set to allow us to define eval() and Function() for the realm.\n  const unsafeRec = getUnsafeRecForRealmClass(selfClass);\n\n  const realmRec = createRealmRec(unsafeRec);\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\nfunction getRealmGlobal(self) {\n  const { safeGlobal } = getRealmRecForRealmInstance(self);\n  return safeGlobal;\n}\n\nfunction realmEvaluate(self, x, endowments = {}) {\n  // todo: don't pass in primal-realm objects like {}, for safety. OTOH its\n  // properties are copied onto the new global 'target'.\n  // todo: figure out a way to membrane away the contents to safety.\n  const { safeEvalWhichTakesEndowments } = getRealmRecForRealmInstance(self);\n  return safeEvalWhichTakesEndowments(x, endowments);\n}\n\n// Define Realm onto new sharedGlobalDescs, so it can be defined in the\n// safeGlobal like the rest of the shared globals.\nfunction createRealmGlobalObject(unsafeRec) {\n  const Realm = createRealmFacade(unsafeRec, {\n    initRootRealm,\n    initCompartment,\n    getRealmGlobal,\n    realmEvaluate\n  });\n  unsafeRec.sharedGlobalDescs.Realm = {\n    value: Realm,\n    writable: true,\n    configurable: true\n  };\n  return Realm;\n}\n\n// Create the current unsafeRec from the current \"primal\" realm (the realm\n// where the Realm shim is loaded and executed).\nconst currentUnsafeRec = createCurrentUnsafeRec();\nconst Realm = createRealmFacade(currentUnsafeRec, {\n  initRootRealm,\n  initCompartment,\n  getRealmGlobal,\n  realmEvaluate\n});\nregisterUnsafeRecForRealmClass(Realm, currentUnsafeRec);\n\nexport default Realm;\n","// Declare shorthand functions. Sharing these declarations across modules\n// improves both consistency and minification. Unused declarations are\n// dropped by the tree shaking process.\n\n// we capture these, not just for brevity, but for security. If any code\n// modifies Object to change what 'assign' points to, the Realm shim would be\n// corrupted.\n\nexport const {\n  assign,\n  create,\n  defineProperties,\n  defineProperty,\n  freeze,\n  getOwnPropertyDescriptor,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  getPrototypeOf,\n  setPrototypeOf\n} = Object;\n\nexport const {\n  apply,\n  ownKeys // Reflect.ownKeys includes Symbols and unenumerables, unlike Object.keys()\n} = Reflect;\n\n/**\n * uncurryThis()\n * See http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n * which only lives at http://web.archive.org/web/20160805225710/http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n *\n * Performance:\n * 1. The native call is about 10x faster on FF than chrome\n * 2. The version using Function.bind() is about 100x slower on FF, equal on chrome, 2x slower on Safari\n * 3. The version using a spread and Reflect.apply() is about 10x slower on FF, equal on chrome, 2x slower on Safari\n *\n * const bind = Function.prototype.bind;\n * const uncurryThis = bind.bind(bind.call);\n */\nconst uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n\n// We also capture these for security: changes to Array.prototype after the\n// Realm shim runs shouldn't affect subsequent Realm operations.\nexport const objectHasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty),\n  arrayForEach = uncurryThis(Array.prototype.forEach),\n  arrayFilter = uncurryThis(Array.prototype.filter),\n  arrayPush = uncurryThis(Array.prototype.push),\n  arrayPop = uncurryThis(Array.prototype.pop),\n  arrayJoin = uncurryThis(Array.prototype.join),\n  arrayConcat = uncurryThis(Array.prototype.concat),\n  regexpMatch = uncurryThis(RegExp.prototype.match),\n  stringIncludes = uncurryThis(String.prototype.includes);\n","// the ScopeHandler manages a Proxy which serves as the global scope for the\n// safeEvaluator operation (the Proxy is the argument of a 'with' binding).\n// As described in createSafeEvaluator(), it has several functions:\n// * allow the very first (and only the very first) use of 'eval' to map to\n//   the real (unsafe) eval function, so it acts as a 'direct eval' and can\n//   access its lexical scope (which maps to the 'with' binding, which the\n//   ScopeHandler also controls)\n// * ensure that all subsequent uses of 'eval' map to the safeEvaluator,\n//   which lives as the 'eval' property of the safeGlobal\n// * route all other property lookups at the safeGlobal\n// * hide the unsafeGlobal which lives on the scope chain above the 'with'\n// * ensure the Proxy invariants despite some global properties being frozen\n\nimport { getPrototypeOf, objectHasOwnProperty } from './commons';\n\nexport class ScopeHandler {\n  // Properties stored on the handler are not available from the proxy.\n\n  // the Proxy is only used by with(), so the Handler only needs to implement\n  // a few properties: has, get, set (which we leave at the default)\n\n  // todo: throw if any traps other than get/set/has are run (e.g.\n  // getOwnPropertyDescriptors, apply, getPrototypeOf) . Make this handler\n  // inherit from a second one whose 'get' property always throws.\n\n  constructor(unsafeRec) {\n    this.unsafeGlobal = unsafeRec.unsafeGlobal;\n    this.unsafeEval = unsafeRec.unsafeEval;\n\n    // this flag allow us to determine if the eval() call is a controlled\n    // eval done by the realm's code or if it is user-land invocation, so\n    // we can react differently.\n    this.useUnsafeEvaluator = false;\n\n    // todo: this.shadowTarget = getPrototypeOf(somehow_get_target)\n  }\n\n  get(target, prop) {\n    // Special treatment for eval. The very first lookup of 'eval' gets the\n    // unsafe (real direct) eval, so it will get the lexical scope that uses\n    // the 'with' context.\n    if (prop === 'eval') {\n      // test that it is true rather than merely truthy\n      if (this.useUnsafeEvaluator === true) {\n        // reset before use\n        this.useUnsafeEvaluator = false;\n        return this.unsafeEval;\n      }\n      return target.eval;\n    }\n\n    // todo: shim integrity, capture Symbol.unscopables\n    if (prop === Symbol.unscopables) {\n      // Safe to return a primal realm Object here because the only code that\n      // can do a get() on a non-string is the internals of with() itself,\n      // and the only thing it does is to look for properties on it. User\n      // code cannot do a lookup on non-strings.\n      return undefined;\n    }\n\n    // Properties of the global.\n    if (prop in target) {\n      return target[prop];\n    }\n    // Prevent the lookup for other properties.\n    return undefined;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  set(target, prop, value) {\n    // Set the value on the shadow. The target itself is an empty\n    // object that is only used to prevent a frozen eval property.\n    // todo: use this.shadowTarget, for speedup\n\n    // new todo: allow modifications when target.hasOwnProperty(prop) and it\n    // is writable, assuming we've already rejected overlap (see\n    // createSafeEvaluatorFactory.factory). This TypeError gets replaced with\n    // target[prop] = value\n    if (objectHasOwnProperty(target, prop)) {\n      // todo: shim integrity: TypeError, String\n      throw new TypeError(`do not modify endowments like ${String(prop)}`);\n    }\n    getPrototypeOf(target)[prop] = value;\n    // Return true after successful set.\n    return true;\n  }\n\n  // we need has() to return false for some names to prevent the lookup  from\n  // climbing the scope chain and eventually reaching the unsafeGlobal\n  // object, which is bad.\n\n  // note: unscopables! every string in Object[Symbol.unscopables]\n\n  // todo: we'd like to just have has() return true for everything, and then\n  // use get() to raise a ReferenceError for anything not on the safe global.\n  // But we want to be compatible with ReferenceError in the normal case and\n  // the lack of ReferenceError in the 'typeof' case. Must either reliably\n  // distinguish these two cases (the trap behavior might be different), or\n  // we rely on a mandatory source-to-source transform to change 'typeof abc'\n  // to XXX. We already need a mandatory parse to prevent the 'import' and\n  // 'import.meta' expressions, since they're special forms instead of merely\n  // being a global variable\n\n  // note: if we make has() return true always, then we must implement a\n  // set() trap to avoid subverting the protection of strict mode (it would\n  // accept assignments to undefined globals, when it ought to throw\n  // ReferenceError for such assignments)\n\n  has(target, prop) {\n    // proxies stringify 'prop', so no TOCTTOU danger here\n    if (prop === 'eval') {\n      return true;\n    }\n    if (prop === 'arguments') {\n      return false;\n    }\n    if (prop in target) {\n      return true;\n    }\n    // hide all properties of unsafeGlobal at the expense of 'typeof' being\n    // wrong for those properties\n    if (prop in this.unsafeGlobal) {\n      // in browser, 'document = 3', this will add a property to your safeGlobal\n      return true;\n    }\n    return false;\n  }\n}\n"],"names":["createRealmFacade","unsafeRec","BaseRealm","unsafeEval","buildChildRealmString","getSharedGlobalDescs","unsafeGlobal","descriptors","Infinity","value","NaN","undefined","name","sharedGlobalPropertyNames","writable","configurable","repairAccessors","toObject","obj","TypeError","Object","asPropertyName","aFunction","accessor","defineProperty","defineProperties","getOwnPropertyDescriptor","getPrototypeOf","prototype","objectPrototype","__lookupGetter__","ignore","__defineGetter__","prop","func","O","get","enumerable","__defineSetter__","set","desc","__lookupSetter__","repairFunctions","repairFunction","declaration","FunctionInstance","Function","e","SyntaxError","FunctionPrototype","TamedFunction","constructor","setPrototypeOf","createUnsafeRec","allShims","sharedGlobalDescs","freeze","eval","unsafeFunction","createNewUnsafeRec","getNewUnsafeGlobal","repairAccessorsShim","repairFunctionsShim","rejectImportExpressions","s","matches","scanner","exec","linenum","split","length","throwTantrum","err","msg","console","error","stack","assert","condition","message","getOptimizableGlobals","safeGlobal","descs","getOwnPropertyDescriptors","constants","arrayFilter","getOwnPropertyNames","regexpMatch","identifierPattern","buildOptimizer","arrayJoin","createScopedEvaluatorFactory","optimizer","createSafeEvaluatorFactory","scopeHandler","ScopeHandler","optimizableGlobals","scopedEvaluatorFactory","endowments","scopeTarget","create","scopeProxy","Proxy","scopedEvaluator","safeEval","src","useUnsafeEvaluator","apply","createSafeEvaluator","safeEvaluatorFactory","createSafeEvaluatorWhichTakesEndowments","x","createFunctionEvaluator","safeFunction","params","functionBody","arrayPop","functionParams","stringIncludes","getUnsafeRecForRealmClass","RealmClass","UnsafeRecForRealmClass","has","registerUnsafeRecForRealmClass","getRealmRecForRealmInstance","realm","RealmRecForRealmInstance","registerRealmRecForRealmInstance","realmRec","setDefaultBindings","createRealmRec","safeEvalWhichTakesEndowments","initRootRealm","selfClass","self","options","newShims","shims","oldShims","arrayConcat","Realm","createRealmGlobalObject","shim","realmEvaluate","initCompartment","getRealmGlobal","callAndWrapError","target","args","eName","eMessage","eStack","ignored","Error","ErrorConstructor","errorConstructors","err2","Map","EvalError","RangeError","ReferenceError","URIError","makeRootRealm","r","makeCompartment","global","evaluate","assign","ownKeys","Reflect","uncurryThis","fn","thisArg","objectHasOwnProperty","hasOwnProperty","Array","filter","pop","join","concat","RegExp","match","String","includes","isNode","exports","module","isBrowser","document","vm","require","unsafeGlobalEvalSrc","runInNewContext","iframe","createElement","style","display","body","appendChild","contentWindow","Symbol","unscopables","WeakMap","currentUnsafeRec"],"mappings":"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"}