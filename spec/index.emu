<!doctype html>
<meta charset="utf8">
<link href="ecmarkup.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="ecmarkup.js"></script>
<pre class=metadata>
title: ECMAScript Realms Spec Proposal
stage: 0
contributors: Dave Herman, Caridy Patiño, Mark Miller
status: draft
copyright: false
location: https://rawgit.com/tc39/proposal-realms/master/index.html
</pre>

<emu-table id="table-1" caption="Well-known Intrinsic Objects">
    <table>
        <tbody>
            <tr>
                <th>Intrinsic Name</th>
                <th>Global Name</th>
                <th>ECMAScript Language Association</th>
            </tr>
            <tr>
                <td>%Realm%</td>
                <td><code>Realm</code></td>
                <td>…</td>
            </tr>
            <tr>
                <td>%RealmPrototype%</td>
                <td><code>Realm.prototype</code></td>
                <td>…</td>
            </tr>
        </tbody>
    </table>
</emu-table>

<!-- es6num="8.2" -->
<emu-clause id="sec-code-realms">
  <h1>Realms</h1>

  <emu-table id="table-21" caption="Realm Record Fields">
    <table>
        <tbody>
            <tr>
                <th>Field Name</th>
                <th>Value</th>
                <th>Meaning</th>
            </tr>
            <tr>
                <td>[[HostDefined]]</td>
                <td>...</td>
                <td>...</td>
            </tr>
            <tr>
                <td>[[IsDirectEvalTrap]]</td>
                <td>A function object or *undefined*</td>
                <td>The function that is used as the direct eval check trap. If [[IsDirectEvalTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
            </tr>
            <tr>
                <td>[[OuterRealmRecord]]</td>
                <td>A Realm Record or *null*</td>
                <td>The outer Realm Record or *null* for detached realms.</td>
            </tr>
        </tbody>
    </table>
  </emu-table>

  <emu-clause id="sec-invokeisdirectevaltrap" aoid="InvokeIsDirectEvalTrap">
    <h1>InvokeIsDirectEvalTrap( _trap_, _func_ )</h1>
    <p>The abstract operation InvokeIsDirectEvalTrap with arguments _trap_ and _func_ performs the following steps:</p>
    <emu-alg>
      1. Assert: IsCallable(_trap_) is *true*.
      1. Let _result_ be ToBoolean( ? Call(_trap_, *undefined*, &laquo; _func_ &raquo;)).
      1. Return _result_.
    </emu-alg>
  </emu-clause>

</emu-clause>

<!-- es6num="12.3.4.1" -->
<emu-clause id="sec-function-calls-runtime-semantics-evaluation">
  <h1>Runtime Semantics: Evaluation</h1>
  <emu-grammar>CallExpression : CoverCallExpressionAndAsyncArrowHead</emu-grammar>
  <emu-alg>
    1. Let _expr_ be CoveredCallExpression of CoverCallExpressionAndAsyncArrowHead.
    1. Let _memberExpr_ be the MemberExpression of _expr_.
    1. Let _arguments_ be the Arguments of _expr_.
    1. Let _ref_ be the result of evaluating _memberExpr_.
    1. Let _func_ be ? GetValue(_ref_).
    1. If Type(_ref_) is Reference and IsPropertyReference(_ref_) is *false* and GetReferencedName(_ref_) is `"eval"`, then
      1. <ins>Let _evalRealm_ be the current Realm Record.</ins>.
      1. <ins>Let _trapFn_ be _evalRealm_.[[IsDirectEvalTrap]]</ins>.
      1. <ins>If IsCallable(_trapFn_) is *true*, then</ins>
        1. <ins>Let _isDirectEval_ be ? InvokeIsDirectEvalTrap(_trapFn_, _func_).</ins>.
      1.  <ins>Else</ins>,
        1. <ins>Let _isDirectEval_ be SameValue(_func_, %eval%)</ins>.
      1. If <ins>_isDirectEval_</ins><del>SameValue(_func_, %eval%)</del> is *true*, then
        1. Let _argList_ be ? ArgumentListEvaluation(_arguments_).
        1. If _argList_ has no elements, return undefined.
        1. Let _evalText_ be the first element of _argList_.
        1. If the source code matching this CallExpression is strict mode code, let _strictCaller_ be *true*. Otherwise let strictCaller be *false*.
        1. <del>Let evalRealm be the current Realm Record</del>.
        1. Perform ? HostEnsureCanCompileStrings(_evalRealm_, _evalRealm_).
        1. Return ? PerformEval(_evalText_, _evalRealm_, _strictCaller_, *true*).
    1. Let _thisCall_ be this CallExpression.
    1. Let _tailCall_ be IsInTailPosition(_thisCall_).
    1. Return ? EvaluateCall(_func_, _ref_, _arguments_, _tailCall_).
  </emu-alg>
</emu-clause>

<emu-clause id="sec-realm-objects">
  <h1>Realm Objects</h1>
  <emu-clause id="sec-realm-abstract-operations">
    <h1>Realm Abstract Operations</h1>
    <emu-clause id="sec-create-realm-rec" aoid="CreateRealmRec">
      <h1>CreateRealmRec ()</h1>
      <emu-alg>
      1. Let _realmRec_ be a new Realm Record.
      1. Perform CreateIntrinsics(_realmRec_).
      1. Set _realmRec_.[[GlobalObject]] to *undefined*.
      1. Set _realmRec_.[[GlobalEnv]] to *undefined*.
      1. Set _realmRec_.[[TemplateMap]] to a new empty List.
      1. Return _realmRec_.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-performRealmEvaluation" aoid="PerformRealmEvaluation">
      <h1>PerformRealmEvaluation ( _x_, _evalRealm_ )</h1>
      <emu-alg>
      1. Assert: Type(_x_) is String.
      1. Assert: _evalRealm_ is a Realm Record.
      1. Let _hostDefined_ be _evalRealm_.[[HostDefined]].
      1. Let _s_ be ParseScript(_x_, _evalRealm_, _hostDefined_).
      1. If _s_ is a List of errors, then
        1. Perform HostReportErrors(_s_).
        1. Return NormalCompletion(*undefined*).
      1. Return ? ScriptEvaluation(_s_).
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-the-realm-constructor">
    <h1>The Realm Constructor</h1>
    <p>
        The Realm constructor is the %Realm% intrinsic object and the initial value of the *Realm* property of the global object. When called as a constructor it creates and initializes a new Realm object. Realm is not intended to be called as a function and will throw an exception when called in that manner.
    </p>
    <p>
        The Realm constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified Realm behaviour must include a super call to the Realm constructor to create and initialize the subclass instance with the internal state necessary to support the Realm.prototype built-in methods.
    </p>
    <emu-clause id="sec-realm" aoid="Realm">
      <h1>Realm ([ _options_ ])</h1>
      When Realm is called with argument _option_ performs the following steps:
      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, "%RealmPrototype%", « [[Realm]] »).
        1. If _options_ is not *undefined*, then
          1. Let _opts_ be ? ToObject(_options_).
          1. Let _isDirectEvalTrap_ be ? Get(_opts_, "isDirectEval").
          1. If _isDirectEvalTrap_ is not *undefined* and IsCallable(_isDirectEvalTrap_) is *false*, throw a TypeError exception.
          1. Let _thisValue_ be ? Get(_opts_, "thisValue").
          1. If _thisValue_ is not *undefined* and Type(_thisValue_) is not Object, throw a TypeError exception.
        1. Let _currentRealm_ be the current Realm Record.
        1. Let _realmRec_ be CreateRealmRec(_intrinsics_).
        1. Set _O_.[[Realm]] to _realmRec_.
        1. Set _O_.[[OuterRealmRecord]] to _currentRealm_.
        1. Perform ? SetRealmGlobalObject(_realmRec_, *undefined*, _thisValue_).
        1. Set _realmRec_.[[IsDirectEvalTrap]] to _isDirectEvalTrap_.
        1. Perform ? SetDefaultGlobalBindings(_O_.[[Realm]]).
        1. Return _O_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-the-realm-constructor">
      <h1>Properties of the Realm Constructor</h1>

      The value of the [[Prototype]] internal slot of the *Realm* constructor is the intrinsic object %FunctionPrototype%.

  </emu-clause>

  <emu-clause id="sec-properties-of-the-realm-prototype-object">
      <h1>Properties of the Realm Prototype Object</h1>

      <emu-clause id="sec-realm.prototype.detach">
          <h1>Realm.prototype.detach ()</h1>

          The following steps are taken:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Set _O_.[[OuterRealmRecord]] to *null*.
          </emu-alg>

          <emu-note>
              Extensible web: A detached Realm does not have a outer realm, hence no access to any host specific logic.
          </emu-note>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.eval">
          <h1>Realm.prototype.evaluate ( _sourceText_ )</h1>

          Synchronously execute a top-level script. The _x_ is interpreted as a Script and evaluated with this bound to the realm's global object.

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. If Type(_sourceText_) is not String, throw a *TypeError* exception.
          1. Let _realm_ be _O_.[[Realm]].
          1. Return ? PerformRealmEvaluation(_sourceText_, _realm_).
          </emu-alg>

          <emu-note>
              Extensible web: This is the dynamic equivalent of a &lt;script&gt; in HTML.
          </emu-note>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.stdlib">
          <h1>Realm.prototype.stdlib ()</h1>

          The following steps are taken:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Let _realmRec_ be _O_.[[Realm]].
          1. Let global be realmRec.[[GlobalObject]].
          1. Let _stdlib_ be ObjectCreate(%ObjectPrototype%).
          1. For each property of the Global Object specified in clause <emu-xref href="#sec-global-object"></emu-xref> that correspond to an intrinsic object, do:
            1. Let _name_ be the String value of the property name.
            1. Let _value_ be the corresponding value of the intrinsic object from record _realmRec_.[[Intrinsics]].
            1. Let _descObj_ be ObjectCreate(%ObjectPrototype%).
            1. Perform ? DefinePropertyOrThrow(_descObj_, *"value"*, PropertyDescriptor{[[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true*}).
            1. Perform ? DefinePropertyOrThrow(_stdlib_, _name_, PropertyDescriptor{[[Value]]: _descObj_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true*}).
          1. Return _stdlib_.
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.intrinsics">
          <h1>Realm.prototype.intrinsics ()</h1>

          The following steps are taken:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Let _realmRec_ be _O_.[[Realm]].
          1. Let _intrinsics_ be ObjectCreate(%ObjectPrototype%).
          1. For each intrinsic name listed in <emu-xref href="#table-7"></emu-xref>, do:
            1. Let _intrinsicName_ be the String value in column one of the table.
            1. Let _name_ be the String value of _intrinsicName_ without the *%* symbols.
            1. Let _value_ be the value of the field name _intrisicName_ from record _realmRec_.[[Intrinsics]].
            1. Perform ? DefinePropertyOrThrow(_intrinsics_, _name_, PropertyDescriptor{[[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true*}).
          1. Return _intrinsics_.
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.global">
          <h1>get Realm.prototype.global</h1>

          Realm.prototype.global is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Return _O_.[[Realm]].[[GlobalObject]].
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.thisValue">
          <h1>get Realm.prototype.thisValue</h1>

          Realm.prototype.thisValue is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Let _envRec_ be _O_.[[Realm]].[[GlobalEnv]].
          1. Return _envRec_.[[GlobalThisValue]].
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype-@@tostringtag">
          <h1>Realm.prototype [ @@toStringTag ]</h1>

          The initial value of the @@toStringTag property is the String value "Realm".

          This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.
      </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-realm-instances">
      <h1>Properties of Realm Instances</h1>

      Realm instances are ordinary objects that inherit properties from the Realm prototype object (the intrinsic, %RealmPrototype%). Realm instances are initially created with the internal slots described in <emu-xref href="#table-3"></emu-xref>.

      <emu-table id="table-3" caption="Internal Slots of Realm Instances">
          <table>
              <tbody>
                  <tr>
                      <th>Internal Slot</th>
                      <th>Type</th>
                      <th>Description</th>
                  </tr>
                  <tr>
                      <td>[[Realm]]</td>
                      <td>Realm Record</td>
                      <td>The Realm Record for the initial execution context.</td>
                  </tr>
              </tbody>
          </table>
      </emu-table>

  </emu-clause>

</emu-clause>
